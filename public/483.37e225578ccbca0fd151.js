"use strict";(self.webpackChunkmuibasic_starterkit=self.webpackChunkmuibasic_starterkit||[]).push([[483],{3483:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ view_BasePostView)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n// EXTERNAL MODULE: ./node_modules/react-router/dist/development/chunk-SYFQ2XB5.mjs\nvar chunk_SYFQ2XB5 = __webpack_require__(4753);\n// EXTERNAL MODULE: ./node_modules/@mui/material/Container/Container.js + 1 modules\nvar Container = __webpack_require__(7834);\n// EXTERNAL MODULE: ./node_modules/@mui/material/Paper/Paper.js + 2 modules\nvar Paper = __webpack_require__(538);\n// EXTERNAL MODULE: ./node_modules/@mui/material/Box/Box.js + 2 modules\nvar Box = __webpack_require__(9067);\n// EXTERNAL MODULE: ./node_modules/@mui/material/Typography/Typography.js + 1 modules\nvar Typography = __webpack_require__(6454);\n// EXTERNAL MODULE: ./src/components/auth/AuthContext.js\nvar AuthContext = __webpack_require__(8371);\n// EXTERNAL MODULE: ./node_modules/@mui/material/Alert/Alert.js + 6 modules\nvar Alert = __webpack_require__(9502);\n// EXTERNAL MODULE: ./node_modules/@mui/material/Avatar/Avatar.js + 2 modules\nvar Avatar = __webpack_require__(1385);\n// EXTERNAL MODULE: ./node_modules/@mui/material/TextField/TextField.js + 3 modules\nvar TextField = __webpack_require__(2471);\n// EXTERNAL MODULE: ./node_modules/@mui/material/Button/Button.js + 3 modules\nvar Button = __webpack_require__(6990);\n// EXTERNAL MODULE: ./node_modules/@mui/material/Tooltip/Tooltip.js + 58 modules\nvar Tooltip = __webpack_require__(2397);\n// EXTERNAL MODULE: ./node_modules/@mui/material/Chip/Chip.js + 2 modules\nvar Chip = __webpack_require__(2022);\n// EXTERNAL MODULE: ./node_modules/@mui/material/FormControlLabel/FormControlLabel.js + 3 modules\nvar FormControlLabel = __webpack_require__(7414);\n// EXTERNAL MODULE: ./node_modules/@mui/material/Checkbox/Checkbox.js + 4 modules\nvar Checkbox = __webpack_require__(7558);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Lock.js\nvar Lock = __webpack_require__(9898);\n;// ./src/components/comments/CommentInput.js\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar roleConfig = {\n  STUDENT: {\n    label: \'학생\',\n    color: \'primary\'\n  },\n  PROFESSOR: {\n    label: \'교수\',\n    color: \'secondary\'\n  },\n  COMPANY: {\n    label: \'기업\',\n    color: \'success\'\n  },\n  ADMIN: {\n    label: \'관리자\',\n    color: \'error\'\n  }\n};\nvar CommentInput = function CommentInput(_ref) {\n  var _currentUser$displayN, _roleConfig$currentUs, _roleConfig$currentUs2;\n  var onSubmit = _ref.onSubmit,\n    isReply = _ref.isReply,\n    parentIsPrivate = _ref.parentIsPrivate;\n  var _useAuth = (0,AuthContext/* useAuth */.As)(),\n    currentUser = _useAuth.currentUser;\n  var _useState = (0,react.useState)(\'\'),\n    _useState2 = _slicedToArray(_useState, 2),\n    content = _useState2[0],\n    setContent = _useState2[1];\n  var _useState3 = (0,react.useState)(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isPrivate = _useState4[0],\n    setIsPrivate = _useState4[1];\n\n  // 비공개 댓글 답글일 경우\n  var isPrivateDisabled = isReply && parentIsPrivate;\n  var effectiveIsPrivate = isPrivateDisabled ? true : isPrivate;\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    if (content.trim()) {\n      onSubmit(content, effectiveIsPrivate);\n      setContent(\'\');\n      if (!isPrivateDisabled) {\n        setIsPrivate(false);\n      }\n    }\n  };\n  return /*#__PURE__*/react_default().createElement(Paper/* default */.A, {\n    sx: {\n      p: 2,\n      mb: 2\n    }\n  }, /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      display: \'flex\',\n      alignItems: \'center\',\n      mb: 2,\n      gap: 1\n    }\n  }, /*#__PURE__*/react_default().createElement(Avatar/* default */.A, {\n    sx: {\n      width: 32,\n      height: 32\n    },\n    src: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.profileImage) || null\n  }, ((currentUser === null || currentUser === void 0 || (_currentUser$displayN = currentUser.displayName) === null || _currentUser$displayN === void 0 ? void 0 : _currentUser$displayN[0]) || \'?\').toUpperCase()), /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "subtitle2"\n  }, currentUser ? currentUser.displayName || \'사용자\' : \'익명\'), (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) && /*#__PURE__*/react_default().createElement(Chip/* default */.A, {\n    label: ((_roleConfig$currentUs = roleConfig[currentUser.role]) === null || _roleConfig$currentUs === void 0 ? void 0 : _roleConfig$currentUs.label) || currentUser.role,\n    color: ((_roleConfig$currentUs2 = roleConfig[currentUser.role]) === null || _roleConfig$currentUs2 === void 0 ? void 0 : _roleConfig$currentUs2.color) || \'default\',\n    size: "small",\n    sx: {\n      height: 20\n    }\n  })), /*#__PURE__*/react_default().createElement("form", {\n    onSubmit: handleSubmit\n  }, /*#__PURE__*/react_default().createElement(TextField/* default */.A, {\n    fullWidth: true,\n    multiline: true,\n    minRows: 2,\n    maxRows: 4,\n    value: content,\n    onChange: function onChange(e) {\n      return setContent(e.target.value);\n    },\n    placeholder: isReply ? "답글을 입력하세요..." : "댓글을 입력하세요...",\n    size: "small",\n    sx: {\n      mb: 1\n    }\n  }), /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      display: \'flex\',\n      justifyContent: \'space-between\',\n      alignItems: \'center\'\n    }\n  }, /*#__PURE__*/react_default().createElement(Tooltip/* default */.A, {\n    title: isPrivateDisabled ? "원본 댓글이 비공개이므로 답글도 비공개입니다" : "비공개 댓글은 작성자와 게시글 작성자만 볼 수 있습니다"\n  }, /*#__PURE__*/react_default().createElement(FormControlLabel/* default */.A, {\n    control: /*#__PURE__*/react_default().createElement(Checkbox/* default */.A, {\n      checked: effectiveIsPrivate,\n      onChange: function onChange(e) {\n        return setIsPrivate(e.target.checked);\n      },\n      size: "small",\n      disabled: isPrivateDisabled,\n      icon: /*#__PURE__*/react_default().createElement(Lock/* default */.A, {\n        sx: {\n          fontSize: 20,\n          color: \'text.secondary\'\n        }\n      }),\n      checkedIcon: /*#__PURE__*/react_default().createElement(Lock/* default */.A, {\n        sx: {\n          fontSize: 20\n        }\n      })\n    }),\n    label: /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n      variant: "body2",\n      color: isPrivateDisabled ? "text.disabled" : "text.secondary"\n    }, "\\uBE44\\uACF5\\uAC1C ", isReply ? \'답글\' : \'댓글\')\n  })), /*#__PURE__*/react_default().createElement(Button/* default */.A, {\n    type: "submit",\n    variant: "contained",\n    size: "small",\n    disabled: !content.trim()\n  }, isReply ? \'답글 달기\' : \'댓글 달기\'))));\n};\n/* harmony default export */ const comments_CommentInput = (CommentInput);\n// EXTERNAL MODULE: ./node_modules/@mui/material/Card/Card.js + 1 modules\nvar Card = __webpack_require__(4977);\n// EXTERNAL MODULE: ./node_modules/@mui/material/CardContent/CardContent.js + 1 modules\nvar CardContent = __webpack_require__(7636);\n// EXTERNAL MODULE: ./node_modules/@mui/material/IconButton/IconButton.js + 1 modules\nvar IconButton = __webpack_require__(1641);\n// EXTERNAL MODULE: ./node_modules/@mui/material/CircularProgress/CircularProgress.js + 1 modules\nvar CircularProgress = __webpack_require__(3357);\n// EXTERNAL MODULE: ./node_modules/@mui/material/Dialog/Dialog.js + 1 modules\nvar Dialog = __webpack_require__(8031);\n// EXTERNAL MODULE: ./node_modules/@mui/material/DialogTitle/DialogTitle.js\nvar DialogTitle = __webpack_require__(6831);\n// EXTERNAL MODULE: ./node_modules/@mui/material/DialogContent/DialogContent.js + 1 modules\nvar DialogContent = __webpack_require__(2477);\n// EXTERNAL MODULE: ./node_modules/@mui/material/DialogContentText/DialogContentText.js + 1 modules\nvar DialogContentText = __webpack_require__(7867);\n// EXTERNAL MODULE: ./node_modules/@mui/material/DialogActions/DialogActions.js + 1 modules\nvar DialogActions = __webpack_require__(8763);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Edit.js\nvar Edit = __webpack_require__(8597);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Delete.js\nvar Delete = __webpack_require__(7034);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Save.js\nvar Save = __webpack_require__(6603);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Cancel.js\nvar Cancel = __webpack_require__(2299);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/AdminPanelSettings.js\nvar AdminPanelSettings = __webpack_require__(6431);\n// EXTERNAL MODULE: ./node_modules/firebase/firestore/dist/esm/index.esm.js + 3 modules\nvar index_esm = __webpack_require__(7594);\n// EXTERNAL MODULE: ./src/firebase.js\nvar firebase = __webpack_require__(7909);\n;// ./src/hooks/useReplies.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || useReplies_unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return useReplies_arrayLikeToArray(r); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction useReplies_slicedToArray(r, e) { return useReplies_arrayWithHoles(r) || useReplies_iterableToArrayLimit(r, e) || useReplies_unsupportedIterableToArray(r, e) || useReplies_nonIterableRest(); }\nfunction useReplies_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction useReplies_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return useReplies_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? useReplies_arrayLikeToArray(r, a) : void 0; } }\nfunction useReplies_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction useReplies_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction useReplies_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\nvar useReplies = function useReplies(commentId, postId, collectionName) {\n  var _useState = (0,react.useState)([]),\n    _useState2 = useReplies_slicedToArray(_useState, 2),\n    replyList = _useState2[0],\n    setReplyList = _useState2[1];\n  var _useState3 = (0,react.useState)(0),\n    _useState4 = useReplies_slicedToArray(_useState3, 2),\n    replyCount = _useState4[0],\n    setReplyCount = _useState4[1];\n  var _useState5 = (0,react.useState)(false),\n    _useState6 = useReplies_slicedToArray(_useState5, 2),\n    loadingReplies = _useState6[0],\n    setLoadingReplies = _useState6[1];\n  var _useState7 = (0,react.useState)(true),\n    _useState8 = useReplies_slicedToArray(_useState7, 2),\n    loadingCount = _useState8[0],\n    setLoadingCount = _useState8[1];\n  var _useState9 = (0,react.useState)(true),\n    _useState10 = useReplies_slicedToArray(_useState9, 2),\n    hasMoreReplies = _useState10[0],\n    setHasMoreReplies = _useState10[1];\n  var _useState11 = (0,react.useState)(null),\n    _useState12 = useReplies_slicedToArray(_useState11, 2),\n    lastReplyDoc = _useState12[0],\n    setLastReplyDoc = _useState12[1];\n  var _useState13 = (0,react.useState)(null),\n    _useState14 = useReplies_slicedToArray(_useState13, 2),\n    error = _useState14[0],\n    setError = _useState14[1];\n\n  // 답글 개수 가져오기\n  (0,react.useEffect)(function () {\n    var fetchReplyCount = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var commentsRef, countQuery, snapshot;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!commentId || !postId || !collectionName)) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt("return");\n            case 2:\n              _context.prev = 2;\n              setLoadingCount(true);\n              commentsRef = (0,index_esm/* collection */.rJ)(firebase.db, "".concat(collectionName, "_comments"));\n              countQuery = (0,index_esm/* query */.P)(commentsRef, (0,index_esm/* where */._M)("postId", "==", postId), (0,index_esm/* where */._M)("parentId", "==", commentId));\n              _context.next = 8;\n              return (0,index_esm/* getCountFromServer */.d_)(countQuery);\n            case 8:\n              snapshot = _context.sent;\n              setReplyCount(snapshot.data().count);\n              _context.next = 16;\n              break;\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context["catch"](2);\n              console.error("Error fetching reply count:", _context.t0);\n              setError(_context.t0);\n            case 16:\n              _context.prev = 16;\n              setLoadingCount(false);\n              return _context.finish(16);\n            case 19:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, null, [[2, 12, 16, 19]]);\n      }));\n      return function fetchReplyCount() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchReplyCount();\n  }, [commentId, postId, collectionName]);\n\n  // 사용자 정보 가져오기\n  var fetchUserData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(authorId) {\n      var userDoc;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return (0,index_esm/* getDoc */.x7)((0,index_esm/* doc */.H9)(firebase.db, \'users\', authorId));\n          case 3:\n            userDoc = _context2.sent;\n            if (!userDoc.exists()) {\n              _context2.next = 6;\n              break;\n            }\n            return _context2.abrupt("return", _objectSpread({\n              id: userDoc.id\n            }, userDoc.data()));\n          case 6:\n            return _context2.abrupt("return", null);\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2["catch"](0);\n            console.error("Error fetching user data:", _context2.t0);\n            return _context2.abrupt("return", null);\n          case 13:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[0, 9]]);\n    }));\n    return function fetchUserData(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var loadInitialReplies = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var commentsRef, repliesQuery, snapshot, replies;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!(!commentId || !postId || !collectionName)) {\n              _context4.next = 2;\n              break;\n            }\n            return _context4.abrupt("return");\n          case 2:\n            setLoadingReplies(true);\n            setError(null);\n            _context4.prev = 4;\n            commentsRef = (0,index_esm/* collection */.rJ)(firebase.db, "".concat(collectionName, "_comments"));\n            repliesQuery = (0,index_esm/* query */.P)(commentsRef, (0,index_esm/* where */._M)("postId", "==", postId), (0,index_esm/* where */._M)("parentId", "==", commentId), (0,index_esm/* orderBy */.My)("createdAt", "desc"), (0,index_esm/* limit */.AB)(10));\n            _context4.next = 9;\n            return (0,index_esm/* getDocs */.GG)(repliesQuery);\n          case 9:\n            snapshot = _context4.sent;\n            if (snapshot.empty) {\n              _context4.next = 19;\n              break;\n            }\n            _context4.next = 13;\n            return Promise.all(snapshot.docs.map(/*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(doc) {\n                var data, author, createdAt, updatedAt;\n                return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                  while (1) switch (_context3.prev = _context3.next) {\n                    case 0:\n                      data = doc.data();\n                      _context3.next = 3;\n                      return fetchUserData(data.authorId);\n                    case 3:\n                      author = _context3.sent;\n                      if (data.createdAt) {\n                        if (data.createdAt.toDate) {\n                          createdAt = data.createdAt.toDate();\n                        } else if (data.createdAt instanceof Date) {\n                          createdAt = data.createdAt;\n                        } else {\n                          createdAt = new Date(data.createdAt);\n                        }\n                      } else {\n                        createdAt = new Date();\n                      }\n                      if (data.updatedAt) {\n                        if (data.updatedAt.toDate) {\n                          updatedAt = data.updatedAt.toDate();\n                        } else if (data.updatedAt instanceof Date) {\n                          updatedAt = data.updatedAt;\n                        } else {\n                          updatedAt = new Date(data.updatedAt);\n                        }\n                      } else {\n                        updatedAt = new Date();\n                      }\n                      return _context3.abrupt("return", _objectSpread(_objectSpread({\n                        id: doc.id\n                      }, data), {}, {\n                        author: author,\n                        createdAt: createdAt,\n                        updatedAt: updatedAt\n                      }));\n                    case 7:\n                    case "end":\n                      return _context3.stop();\n                  }\n                }, _callee3);\n              }));\n              return function (_x2) {\n                return _ref4.apply(this, arguments);\n              };\n            }()));\n          case 13:\n            replies = _context4.sent;\n            setReplyList(replies.reverse());\n            setLastReplyDoc(snapshot.docs[snapshot.docs.length - 1]);\n            setHasMoreReplies(snapshot.docs.length === 10);\n            _context4.next = 21;\n            break;\n          case 19:\n            setReplyList([]);\n            setHasMoreReplies(false);\n          case 21:\n            _context4.next = 27;\n            break;\n          case 23:\n            _context4.prev = 23;\n            _context4.t0 = _context4["catch"](4);\n            console.error("Error loading replies:", _context4.t0);\n            setError(_context4.t0);\n          case 27:\n            _context4.prev = 27;\n            setLoadingReplies(false);\n            return _context4.finish(27);\n          case 30:\n          case "end":\n            return _context4.stop();\n        }\n      }, _callee4, null, [[4, 23, 27, 30]]);\n    }));\n    return function loadInitialReplies() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var loadMoreReplies = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n      var commentsRef, repliesQuery, snapshot, newReplies;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            if (!(!lastReplyDoc || !hasMoreReplies)) {\n              _context6.next = 2;\n              break;\n            }\n            return _context6.abrupt("return");\n          case 2:\n            setLoadingReplies(true);\n            setError(null);\n            _context6.prev = 4;\n            commentsRef = (0,index_esm/* collection */.rJ)(firebase.db, "".concat(collectionName, "_comments"));\n            repliesQuery = (0,index_esm/* query */.P)(commentsRef, (0,index_esm/* where */._M)("postId", "==", postId), (0,index_esm/* where */._M)("parentId", "==", commentId), (0,index_esm/* orderBy */.My)("createdAt", "desc"), (0,index_esm/* startAfter */.HM)(lastReplyDoc), (0,index_esm/* limit */.AB)(10));\n            _context6.next = 9;\n            return (0,index_esm/* getDocs */.GG)(repliesQuery);\n          case 9:\n            snapshot = _context6.sent;\n            if (snapshot.empty) {\n              _context6.next = 19;\n              break;\n            }\n            _context6.next = 13;\n            return Promise.all(snapshot.docs.map(/*#__PURE__*/function () {\n              var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(doc) {\n                var _data$createdAt, _data$createdAt$toDat, _data$updatedAt, _data$updatedAt$toDat;\n                var data, author;\n                return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                  while (1) switch (_context5.prev = _context5.next) {\n                    case 0:\n                      data = doc.data();\n                      _context5.next = 3;\n                      return fetchUserData(data.authorId);\n                    case 3:\n                      author = _context5.sent;\n                      return _context5.abrupt("return", _objectSpread(_objectSpread({\n                        id: doc.id\n                      }, data), {}, {\n                        author: author,\n                        createdAt: ((_data$createdAt = data.createdAt) === null || _data$createdAt === void 0 || (_data$createdAt$toDat = _data$createdAt.toDate) === null || _data$createdAt$toDat === void 0 ? void 0 : _data$createdAt$toDat.call(_data$createdAt)) || new Date(),\n                        updatedAt: ((_data$updatedAt = data.updatedAt) === null || _data$updatedAt === void 0 || (_data$updatedAt$toDat = _data$updatedAt.toDate) === null || _data$updatedAt$toDat === void 0 ? void 0 : _data$updatedAt$toDat.call(_data$updatedAt)) || new Date()\n                      }));\n                    case 5:\n                    case "end":\n                      return _context5.stop();\n                  }\n                }, _callee5);\n              }));\n              return function (_x3) {\n                return _ref6.apply(this, arguments);\n              };\n            }()));\n          case 13:\n            newReplies = _context6.sent;\n            setReplyList(function (prev) {\n              return [].concat(_toConsumableArray(prev), _toConsumableArray(newReplies.reverse()));\n            });\n            setLastReplyDoc(snapshot.docs[snapshot.docs.length - 1]);\n            setHasMoreReplies(snapshot.docs.length === 10);\n            _context6.next = 20;\n            break;\n          case 19:\n            setHasMoreReplies(false);\n          case 20:\n            _context6.next = 26;\n            break;\n          case 22:\n            _context6.prev = 22;\n            _context6.t0 = _context6["catch"](4);\n            console.error("Error loading more replies:", _context6.t0);\n            setError(_context6.t0);\n          case 26:\n            _context6.prev = 26;\n            setLoadingReplies(false);\n            return _context6.finish(26);\n          case 29:\n          case "end":\n            return _context6.stop();\n        }\n      }, _callee6, null, [[4, 22, 26, 29]]);\n    }));\n    return function loadMoreReplies() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  // commentId가 변경될 때 상태 초기화\n  (0,react.useEffect)(function () {\n    setReplyList([]);\n    setHasMoreReplies(true);\n    setLastReplyDoc(null);\n    setError(null);\n  }, [commentId]);\n  return {\n    replyList: replyList,\n    replyCount: replyCount,\n    loadingReplies: loadingReplies,\n    loadingCount: loadingCount,\n    hasMoreReplies: hasMoreReplies,\n    error: error,\n    loadInitialReplies: loadInitialReplies,\n    loadMoreReplies: loadMoreReplies\n  };\n};\n/* harmony default export */ const hooks_useReplies = (useReplies);\n;// ./src/components/comments/Comment.js\nfunction Comment_typeof(o) { "@babel/helpers - typeof"; return Comment_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Comment_typeof(o); }\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction Comment_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ Comment_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == Comment_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(Comment_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction Comment_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction Comment_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { Comment_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { Comment_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction Comment_slicedToArray(r, e) { return Comment_arrayWithHoles(r) || Comment_iterableToArrayLimit(r, e) || Comment_unsupportedIterableToArray(r, e) || Comment_nonIterableRest(); }\nfunction Comment_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction Comment_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return Comment_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? Comment_arrayLikeToArray(r, a) : void 0; } }\nfunction Comment_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction Comment_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction Comment_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n// src/components/comments/Comment.js 수정\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Comment_roleConfig = {\n  STUDENT: {\n    label: \'학생\',\n    color: \'primary\'\n  },\n  PROFESSOR: {\n    label: \'교수\',\n    color: \'secondary\'\n  },\n  COMPANY: {\n    label: \'기업\',\n    color: \'success\'\n  },\n  ADMIN: {\n    label: \'관리자\',\n    color: \'error\'\n  }\n};\nvar _Comment = function Comment(_ref) {\n  var _author$displayName, _roleConfig$author$ro, _roleConfig$author$ro2;\n  var id = _ref.id,\n    author = _ref.author,\n    content = _ref.content,\n    timestamp = _ref.timestamp,\n    onEdit = _ref.onEdit,\n    onDelete = _ref.onDelete,\n    onReply = _ref.onReply,\n    isEditable = _ref.isEditable,\n    isReply = _ref.isReply,\n    isPrivate = _ref.isPrivate,\n    currentUser = _ref.currentUser,\n    postAuthorId = _ref.postAuthorId,\n    postId = _ref.postId,\n    collectionName = _ref.collectionName;\n  var _useState = (0,react.useState)(false),\n    _useState2 = Comment_slicedToArray(_useState, 2),\n    isEditing = _useState2[0],\n    setIsEditing = _useState2[1];\n  var _useState3 = (0,react.useState)(false),\n    _useState4 = Comment_slicedToArray(_useState3, 2),\n    isReplying = _useState4[0],\n    setIsReplying = _useState4[1];\n  var _useState5 = (0,react.useState)(false),\n    _useState6 = Comment_slicedToArray(_useState5, 2),\n    showReplies = _useState6[0],\n    setShowReplies = _useState6[1];\n  var _useState7 = (0,react.useState)(content),\n    _useState8 = Comment_slicedToArray(_useState7, 2),\n    editedContent = _useState8[0],\n    setEditedContent = _useState8[1];\n  var _useState9 = (0,react.useState)(\'\'),\n    _useState10 = Comment_slicedToArray(_useState9, 2),\n    replyContent = _useState10[0],\n    setReplyContent = _useState10[1];\n  var _useState11 = (0,react.useState)(false),\n    _useState12 = Comment_slicedToArray(_useState11, 2),\n    deleteDialogOpen = _useState12[0],\n    setDeleteDialogOpen = _useState12[1];\n\n  // 관리자 여부 확인\n  var isAdmin = (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === \'ADMIN\';\n  // 댓글 작성자 또는 관리자인지 확인 (둘 중 하나라도 true면 삭제 가능)\n  var canDelete = isEditable || isAdmin;\n  var _useReplies = hooks_useReplies(id, postId, collectionName),\n    replyList = _useReplies.replyList,\n    replyCount = _useReplies.replyCount,\n    loadingReplies = _useReplies.loadingReplies,\n    hasMoreReplies = _useReplies.hasMoreReplies,\n    error = _useReplies.error,\n    loadInitialReplies = _useReplies.loadInitialReplies,\n    loadMoreReplies = _useReplies.loadMoreReplies;\n\n  // 권한 체크\n  var canViewComment = !isPrivate || currentUser && currentUser.uid === (author === null || author === void 0 ? void 0 : author.id) || currentUser && currentUser.uid === postAuthorId;\n  var canReply = currentUser && (!isPrivate && !isReply || isPrivate && (currentUser.uid === postAuthorId || author && currentUser.uid === author.id));\n\n  // 권한이 없으면 비공개 메시지 표시\n  if (!canViewComment) {\n    return /*#__PURE__*/react_default().createElement(Card/* default */.A, {\n      sx: {\n        mb: 1.5,\n        boxShadow: isReply ? 0 : 1,\n        bgcolor: \'grey.50\',\n        borderRadius: \'8px\'\n      }\n    }, /*#__PURE__*/react_default().createElement(CardContent/* default */.A, {\n      sx: {\n        py: 1.5,\n        px: 2,\n        \'&:last-child\': {\n          pb: 1.5\n        }\n      }\n    }, /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n      sx: {\n        display: \'flex\',\n        alignItems: \'center\',\n        color: \'text.secondary\'\n      }\n    }, /*#__PURE__*/react_default().createElement(Lock/* default */.A, {\n      sx: {\n        mr: 1,\n        fontSize: 20\n      }\n    }), /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n      variant: "body2"\n    }, "\\uBE44\\uACF5\\uAC1C \\uB313\\uAE00\\uC785\\uB2C8\\uB2E4."))));\n  }\n  var handleEdit = function handleEdit() {\n    setIsEditing(true);\n    setEditedContent(content);\n  };\n  var handleCancel = function handleCancel() {\n    setIsEditing(false);\n    setEditedContent(content);\n  };\n  var handleSave = function handleSave() {\n    if (editedContent.trim()) {\n      onEdit(editedContent);\n      setIsEditing(false);\n    }\n  };\n  var handleShowReplies = /*#__PURE__*/function () {\n    var _ref2 = Comment_asyncToGenerator(/*#__PURE__*/Comment_regeneratorRuntime().mark(function _callee() {\n      return Comment_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (showReplies) {\n              _context.next = 3;\n              break;\n            }\n            _context.next = 3;\n            return loadInitialReplies();\n          case 3:\n            setShowReplies(!showReplies);\n          case 4:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function handleShowReplies() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleReply = /*#__PURE__*/function () {\n    var _ref3 = Comment_asyncToGenerator(/*#__PURE__*/Comment_regeneratorRuntime().mark(function _callee2() {\n      return Comment_regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (currentUser) {\n              _context2.next = 3;\n              break;\n            }\n            alert(\'답글을 작성하려면 로그인이 필요합니다.\');\n            return _context2.abrupt("return");\n          case 3:\n            if (!replyContent.trim()) {\n              _context2.next = 11;\n              break;\n            }\n            _context2.next = 6;\n            return onReply(id, replyContent, isPrivate);\n          case 6:\n            setReplyContent(\'\');\n            setIsReplying(false);\n\n            // 답글 작성하고 새로고침\n            if (!showReplies) {\n              setShowReplies(true);\n            }\n            _context2.next = 11;\n            return loadInitialReplies();\n          case 11:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function handleReply() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  // 삭제 확인 다이얼로그 열기\n  var handleOpenDeleteDialog = function handleOpenDeleteDialog() {\n    setDeleteDialogOpen(true);\n  };\n\n  // 삭제 처리\n  var handleConfirmDelete = function handleConfirmDelete() {\n    onDelete();\n    setDeleteDialogOpen(false);\n  };\n  return /*#__PURE__*/react_default().createElement(Card/* default */.A, {\n    sx: {\n      mb: 1.5,\n      boxShadow: isReply ? 0 : 1,\n      bgcolor: isReply ? \'grey.50\' : \'white\',\n      borderRadius: \'8px\'\n    }\n  }, /*#__PURE__*/react_default().createElement(CardContent/* default */.A, {\n    sx: {\n      py: 1.5,\n      px: 2,\n      \'&:last-child\': {\n        pb: 1.5\n      }\n    }\n  }, /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      display: \'flex\',\n      alignItems: \'center\',\n      mb: 0.5\n    }\n  }, /*#__PURE__*/react_default().createElement(Avatar/* default */.A, {\n    sx: {\n      width: 28,\n      height: 28,\n      mr: 1.5\n    },\n    src: (author === null || author === void 0 ? void 0 : author.profileImage) || null\n  }, ((author === null || author === void 0 || (_author$displayName = author.displayName) === null || _author$displayName === void 0 ? void 0 : _author$displayName[0]) || \'?\').toUpperCase()), /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      flexGrow: 1\n    }\n  }, /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      display: \'flex\',\n      alignItems: \'center\',\n      gap: 1\n    }\n  }, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "subtitle2",\n    sx: {\n      fontWeight: 600\n    }\n  }, (author === null || author === void 0 ? void 0 : author.displayName) || \'익명\'), (author === null || author === void 0 ? void 0 : author.role) && /*#__PURE__*/react_default().createElement(Chip/* default */.A, {\n    label: ((_roleConfig$author$ro = Comment_roleConfig[author.role]) === null || _roleConfig$author$ro === void 0 ? void 0 : _roleConfig$author$ro.label) || author.role,\n    color: ((_roleConfig$author$ro2 = Comment_roleConfig[author.role]) === null || _roleConfig$author$ro2 === void 0 ? void 0 : _roleConfig$author$ro2.color) || \'default\',\n    size: "small",\n    sx: {\n      height: 20\n    }\n  }), isPrivate && /*#__PURE__*/react_default().createElement(Tooltip/* default */.A, {\n    title: "\\uBE44\\uACF5\\uAC1C \\uB313\\uAE00"\n  }, /*#__PURE__*/react_default().createElement(Lock/* default */.A, {\n    sx: {\n      fontSize: 16,\n      color: \'warning.main\'\n    }\n  }))), /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "caption",\n    color: "text.secondary"\n  }, timestamp instanceof Date ? timestamp.toLocaleString(\'ko-KR\', {\n    year: \'numeric\',\n    month: \'long\',\n    day: \'numeric\',\n    hour: \'2-digit\',\n    minute: \'2-digit\'\n  }) : \'날짜 없음\')), !isEditing && canDelete && /*#__PURE__*/react_default().createElement(Box/* default */.A, null, isEditable && /*#__PURE__*/react_default().createElement(IconButton/* default */.A, {\n    size: "small",\n    onClick: handleEdit\n  }, /*#__PURE__*/react_default().createElement(Edit/* default */.A, {\n    fontSize: "small"\n  })), /*#__PURE__*/react_default().createElement(Tooltip/* default */.A, {\n    title: isAdmin && !isEditable ? "관리자 권한으로 삭제" : "삭제"\n  }, /*#__PURE__*/react_default().createElement(IconButton/* default */.A, {\n    size: "small",\n    onClick: handleOpenDeleteDialog\n  }, isAdmin && !isEditable ? /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      position: \'relative\'\n    }\n  }, /*#__PURE__*/react_default().createElement(Delete/* default */.A, {\n    fontSize: "small"\n  }), /*#__PURE__*/react_default().createElement(AdminPanelSettings/* default */.A, {\n    sx: {\n      position: \'absolute\',\n      bottom: -8,\n      right: -8,\n      fontSize: 12,\n      color: \'#d32f2f\',\n      backgroundColor: \'white\',\n      borderRadius: \'50%\'\n    }\n  })) : /*#__PURE__*/react_default().createElement(Delete/* default */.A, {\n    fontSize: "small"\n  })))), isEditing && /*#__PURE__*/react_default().createElement(Box/* default */.A, null, /*#__PURE__*/react_default().createElement(IconButton/* default */.A, {\n    size: "small",\n    color: "primary",\n    onClick: handleSave\n  }, /*#__PURE__*/react_default().createElement(Save/* default */.A, {\n    fontSize: "small"\n  })), /*#__PURE__*/react_default().createElement(IconButton/* default */.A, {\n    size: "small",\n    color: "error",\n    onClick: handleCancel\n  }, /*#__PURE__*/react_default().createElement(Cancel/* default */.A, {\n    fontSize: "small"\n  })))), !isEditing ? /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "body2",\n    sx: {\n      ml: 5,\n      whiteSpace: \'pre-wrap\',\n      wordBreak: \'break-word\'\n    }\n  }, content) : /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      ml: 5\n    }\n  }, /*#__PURE__*/react_default().createElement(TextField/* default */.A, {\n    fullWidth: true,\n    multiline: true,\n    size: "small",\n    value: editedContent,\n    onChange: function onChange(e) {\n      return setEditedContent(e.target.value);\n    },\n    sx: {\n      mt: 1\n    }\n  })), !isReply && /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      ml: 5,\n      mt: 1,\n      display: \'flex\',\n      gap: 1\n    }\n  }, canReply && /*#__PURE__*/react_default().createElement(Button/* default */.A, {\n    size: "small",\n    onClick: function onClick() {\n      return setIsReplying(true);\n    },\n    sx: {\n      minWidth: 0,\n      px: 1,\n      color: \'text.secondary\',\n      \'&:hover\': {\n        bgcolor: \'grey.100\'\n      }\n    }\n  }, "\\uB2F5\\uAE00 \\uB0A8\\uAE30\\uAE30"), replyCount > 0 && /*#__PURE__*/react_default().createElement(Button/* default */.A, {\n    size: "small",\n    onClick: handleShowReplies,\n    sx: {\n      minWidth: 0,\n      px: 1,\n      color: \'text.secondary\',\n      \'&:hover\': {\n        bgcolor: \'grey.100\'\n      }\n    }\n  }, showReplies ? \'답글 숨기기\' : "\\uB2F5\\uAE00 ".concat(replyCount, "\\uAC1C"))), error && /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    color: "error",\n    variant: "caption",\n    sx: {\n      ml: 5\n    }\n  }, "\\uB2F5\\uAE00\\uC744 \\uBD88\\uB7EC\\uC624\\uB294\\uB370 \\uC2E4\\uD328\\uD588\\uC2B5\\uB2C8\\uB2E4."), showReplies && /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      ml: 5,\n      mt: 1.5\n    }\n  }, loadingReplies ? /*#__PURE__*/react_default().createElement(CircularProgress/* default */.A, {\n    size: 20,\n    sx: {\n      ml: 2\n    }\n  }) : /*#__PURE__*/react_default().createElement((react_default()).Fragment, null, replyList.map(function (reply) {\n    return /*#__PURE__*/react_default().createElement(_Comment, _extends({\n      key: reply.id\n    }, reply, {\n      timestamp: reply.createdAt,\n      isReply: true,\n      currentUser: currentUser,\n      postAuthorId: postAuthorId,\n      postId: postId,\n      collectionName: collectionName,\n      onEdit: onEdit,\n      onDelete: onDelete\n    }));\n  }), hasMoreReplies && /*#__PURE__*/react_default().createElement(Button/* default */.A, {\n    size: "small",\n    onClick: loadMoreReplies,\n    sx: {\n      mt: 1,\n      color: \'text.secondary\',\n      \'&:hover\': {\n        bgcolor: \'grey.100\'\n      }\n    }\n  }, "\\uC774\\uC804 \\uB2F5\\uAE00 \\uB354\\uBCF4\\uAE30"))), isReplying && /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      ml: 5,\n      mt: 1.5\n    }\n  }, /*#__PURE__*/react_default().createElement(TextField/* default */.A, {\n    fullWidth: true,\n    size: "small",\n    placeholder: "\\uB2F5\\uAE00\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694...",\n    value: replyContent,\n    onChange: function onChange(e) {\n      return setReplyContent(e.target.value);\n    },\n    sx: {\n      mb: 1\n    }\n  }), /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      display: \'flex\',\n      gap: 1,\n      justifyContent: \'flex-end\'\n    }\n  }, /*#__PURE__*/react_default().createElement(Button/* default */.A, {\n    size: "small",\n    variant: "outlined",\n    onClick: function onClick() {\n      setIsReplying(false);\n      setReplyContent(\'\');\n    }\n  }, "\\uCDE8\\uC18C"), /*#__PURE__*/react_default().createElement(Button/* default */.A, {\n    size: "small",\n    variant: "contained",\n    onClick: handleReply,\n    disabled: !replyContent.trim()\n  }, "\\uB2F5\\uAE00 \\uB2EC\\uAE30")))), /*#__PURE__*/react_default().createElement(Dialog/* default */.A, {\n    open: deleteDialogOpen,\n    onClose: function onClose() {\n      return setDeleteDialogOpen(false);\n    }\n  }, /*#__PURE__*/react_default().createElement(DialogTitle/* default */.A, null, isAdmin && !isEditable ? "관리자 권한으로 삭제" : "댓글 삭제"), /*#__PURE__*/react_default().createElement(DialogContent/* default */.A, null, /*#__PURE__*/react_default().createElement(DialogContentText/* default */.A, null, isAdmin && !isEditable ? /*#__PURE__*/react_default().createElement((react_default()).Fragment, null, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "body1",\n    gutterBottom: true\n  }, "\\uAD00\\uB9AC\\uC790 \\uAD8C\\uD55C\\uC73C\\uB85C \\uC774 \\uB313\\uAE00\\uC744 \\uC0AD\\uC81C\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?"), /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    color: "error",\n    variant: "body2"\n  }, "\\uAD00\\uB9AC\\uC790 \\uAD8C\\uD55C\\uC73C\\uB85C \\uC0AD\\uC81C\\uB41C \\uB313\\uAE00\\uC740 \\uBCF5\\uAD6C\\uD560 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.")) : "이 댓글을 삭제하시겠습니까? 삭제된 댓글은 복구할 수 없습니다.")), /*#__PURE__*/react_default().createElement(DialogActions/* default */.A, null, /*#__PURE__*/react_default().createElement(Button/* default */.A, {\n    onClick: function onClick() {\n      return setDeleteDialogOpen(false);\n    }\n  }, "\\uCDE8\\uC18C"), /*#__PURE__*/react_default().createElement(Button/* default */.A, {\n    onClick: handleConfirmDelete,\n    color: "error"\n  }, "\\uC0AD\\uC81C"))));\n};\n/* harmony default export */ const Comment = (_Comment);\n;// ./src/components/comments/CommentList.js\n\n\n\n\n\nvar CommentList = function CommentList(_ref) {\n  var _ref$comments = _ref.comments,\n    comments = _ref$comments === void 0 ? [] : _ref$comments,\n    _onEdit = _ref.onEdit,\n    _onDelete = _ref.onDelete,\n    onReply = _ref.onReply,\n    currentUser = _ref.currentUser,\n    postAuthorId = _ref.postAuthorId,\n    hasMore = _ref.hasMore,\n    onLoadMore = _ref.onLoadMore,\n    postId = _ref.postId,\n    collectionName = _ref.collectionName;\n  // 댓글만 (답글 ㄴㄴ)\n  var parentComments = comments.filter(function (comment) {\n    return !comment.parentId;\n  });\n  return /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      mt: 2\n    }\n  }, parentComments.length === 0 ? /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    color: "text.secondary",\n    textAlign: "center",\n    sx: {\n      py: 4\n    }\n  }, "\\uCCAB \\uBC88\\uC9F8 \\uB313\\uAE00\\uC744 \\uC791\\uC131\\uD574\\uBCF4\\uC138\\uC694.") : parentComments.map(function (comment) {\n    var _comment$author;\n    return /*#__PURE__*/react_default().createElement(Comment, {\n      key: comment.id,\n      id: comment.id,\n      author: comment.author,\n      content: comment.content,\n      timestamp: comment.createdAt,\n      isEditable: ((_comment$author = comment.author) === null || _comment$author === void 0 ? void 0 : _comment$author.id) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.uid),\n      onEdit: function onEdit(newContent) {\n        return _onEdit(comment.id, newContent);\n      },\n      onDelete: function onDelete() {\n        return _onDelete(comment.id);\n      },\n      onReply: onReply,\n      isReply: false,\n      isPrivate: comment.isPrivate,\n      currentUser: currentUser,\n      postAuthorId: postAuthorId,\n      postId: postId,\n      collectionName: collectionName\n    });\n  }), hasMore && parentComments.length >= 10 && /*#__PURE__*/react_default().createElement(Button/* default */.A, {\n    fullWidth: true,\n    variant: "text",\n    onClick: onLoadMore,\n    sx: {\n      mt: 2,\n      color: \'text.secondary\',\n      \'&:hover\': {\n        bgcolor: \'grey.100\'\n      }\n    }\n  }, "\\uB313\\uAE00 \\uB354\\uBCF4\\uAE30"));\n};\n/* harmony default export */ const comments_CommentList = (CommentList);\n// EXTERNAL MODULE: ./node_modules/firebase/functions/dist/esm/index.esm.js + 1 modules\nvar esm_index_esm = __webpack_require__(8910);\n;// ./src/hooks/commentsHook.js\nfunction commentsHook_typeof(o) { "@babel/helpers - typeof"; return commentsHook_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, commentsHook_typeof(o); }\nfunction commentsHook_toConsumableArray(r) { return commentsHook_arrayWithoutHoles(r) || commentsHook_iterableToArray(r) || commentsHook_unsupportedIterableToArray(r) || commentsHook_nonIterableSpread(); }\nfunction commentsHook_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction commentsHook_iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction commentsHook_arrayWithoutHoles(r) { if (Array.isArray(r)) return commentsHook_arrayLikeToArray(r); }\nfunction commentsHook_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ commentsHook_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == commentsHook_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(commentsHook_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction commentsHook_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction commentsHook_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? commentsHook_ownKeys(Object(t), !0).forEach(function (r) { commentsHook_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : commentsHook_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction commentsHook_defineProperty(e, r, t) { return (r = commentsHook_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction commentsHook_toPropertyKey(t) { var i = commentsHook_toPrimitive(t, "string"); return "symbol" == commentsHook_typeof(i) ? i : i + ""; }\nfunction commentsHook_toPrimitive(t, r) { if ("object" != commentsHook_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != commentsHook_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction commentsHook_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction commentsHook_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { commentsHook_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { commentsHook_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction commentsHook_slicedToArray(r, e) { return commentsHook_arrayWithHoles(r) || commentsHook_iterableToArrayLimit(r, e) || commentsHook_unsupportedIterableToArray(r, e) || commentsHook_nonIterableRest(); }\nfunction commentsHook_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction commentsHook_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return commentsHook_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? commentsHook_arrayLikeToArray(r, a) : void 0; } }\nfunction commentsHook_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction commentsHook_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction commentsHook_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n\nvar commentsHook = function commentsHook(postId, collectionName) {\n  var _useState = (0,react.useState)([]),\n    _useState2 = commentsHook_slicedToArray(_useState, 2),\n    comments = _useState2[0],\n    setComments = _useState2[1];\n  var _useState3 = (0,react.useState)(true),\n    _useState4 = commentsHook_slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = (0,react.useState)(null),\n    _useState6 = commentsHook_slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n  var _useAuth = (0,AuthContext/* useAuth */.As)(),\n    currentUser = _useAuth.currentUser;\n  var _useState7 = (0,react.useState)(null),\n    _useState8 = commentsHook_slicedToArray(_useState7, 2),\n    lastDoc = _useState8[0],\n    setLastDoc = _useState8[1];\n  var _useState9 = (0,react.useState)(true),\n    _useState10 = commentsHook_slicedToArray(_useState9, 2),\n    hasMore = _useState10[0],\n    setHasMore = _useState10[1];\n\n  // 사용자 정보 가져오기\n  var fetchUserData = /*#__PURE__*/function () {\n    var _ref = commentsHook_asyncToGenerator(/*#__PURE__*/commentsHook_regeneratorRuntime().mark(function _callee(authorId) {\n      var userDoc;\n      return commentsHook_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return (0,index_esm/* getDoc */.x7)((0,index_esm/* doc */.H9)(firebase.db, \'users\', authorId));\n          case 3:\n            userDoc = _context.sent;\n            if (!userDoc.exists()) {\n              _context.next = 6;\n              break;\n            }\n            return _context.abrupt("return", commentsHook_objectSpread({\n              id: userDoc.id\n            }, userDoc.data()));\n          case 6:\n            return _context.abrupt("return", null);\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context["catch"](0);\n            console.error("Error fetching user data:", _context.t0);\n            return _context.abrupt("return", null);\n          case 13:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n    return function fetchUserData(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  // 댓글 불러오기\n  (0,react.useEffect)(function () {\n    var fetchComments = /*#__PURE__*/function () {\n      var _ref2 = commentsHook_asyncToGenerator(/*#__PURE__*/commentsHook_regeneratorRuntime().mark(function _callee3() {\n        var commentsRef, q, snapshot, commentsData;\n        return commentsHook_regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(!postId || !collectionName)) {\n                _context3.next = 3;\n                break;\n              }\n              setLoading(false);\n              return _context3.abrupt("return");\n            case 3:\n              _context3.prev = 3;\n              setLoading(true);\n              commentsRef = (0,index_esm/* collection */.rJ)(firebase.db, "".concat(collectionName, "_comments"));\n              q = (0,index_esm/* query */.P)(commentsRef, (0,index_esm/* where */._M)("postId", "==", postId), (0,index_esm/* where */._M)("parentId", "==", null), (0,index_esm/* orderBy */.My)("createdAt", "desc"), (0,index_esm/* limit */.AB)(10));\n              _context3.next = 9;\n              return (0,index_esm/* getDocs */.GG)(q);\n            case 9:\n              snapshot = _context3.sent;\n              _context3.next = 12;\n              return Promise.all(snapshot.docs.map(/*#__PURE__*/function () {\n                var _ref3 = commentsHook_asyncToGenerator(/*#__PURE__*/commentsHook_regeneratorRuntime().mark(function _callee2(doc) {\n                  var _data$createdAt, _data$createdAt$toDat, _data$updatedAt, _data$updatedAt$toDat;\n                  var data, author;\n                  return commentsHook_regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) switch (_context2.prev = _context2.next) {\n                      case 0:\n                        data = doc.data();\n                        _context2.next = 3;\n                        return fetchUserData(data.authorId);\n                      case 3:\n                        author = _context2.sent;\n                        return _context2.abrupt("return", commentsHook_objectSpread(commentsHook_objectSpread({\n                          id: doc.id\n                        }, data), {}, {\n                          author: author,\n                          createdAt: ((_data$createdAt = data.createdAt) === null || _data$createdAt === void 0 || (_data$createdAt$toDat = _data$createdAt.toDate) === null || _data$createdAt$toDat === void 0 ? void 0 : _data$createdAt$toDat.call(_data$createdAt)) || new Date(),\n                          updatedAt: ((_data$updatedAt = data.updatedAt) === null || _data$updatedAt === void 0 || (_data$updatedAt$toDat = _data$updatedAt.toDate) === null || _data$updatedAt$toDat === void 0 ? void 0 : _data$updatedAt$toDat.call(_data$updatedAt)) || new Date()\n                        }));\n                      case 5:\n                      case "end":\n                        return _context2.stop();\n                    }\n                  }, _callee2);\n                }));\n                return function (_x2) {\n                  return _ref3.apply(this, arguments);\n                };\n              }()));\n            case 12:\n              commentsData = _context3.sent;\n              setComments(commentsData);\n              setLastDoc(snapshot.docs[snapshot.docs.length - 1]);\n              setHasMore(snapshot.docs.length === 10);\n              setLoading(false);\n              _context3.next = 24;\n              break;\n            case 19:\n              _context3.prev = 19;\n              _context3.t0 = _context3["catch"](3);\n              console.error("Error fetching comments:", _context3.t0);\n              setError(_context3.t0);\n              setLoading(false);\n            case 24:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[3, 19]]);\n      }));\n      return function fetchComments() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    fetchComments();\n  }, [postId, collectionName]);\n\n  // 댓글 작성\n  var addComment = /*#__PURE__*/function () {\n    var _ref4 = commentsHook_asyncToGenerator(/*#__PURE__*/commentsHook_regeneratorRuntime().mark(function _callee4(content) {\n      var isPrivate,\n        batch,\n        commentsRef,\n        newCommentRef,\n        newComment,\n        postRef,\n        author,\n        sendCommentNotification,\n        notificationData,\n        result,\n        _args4 = arguments;\n      return commentsHook_regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            isPrivate = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : false;\n            if (currentUser) {\n              _context4.next = 3;\n              break;\n            }\n            throw new Error("로그인이 필요합니다.");\n          case 3:\n            _context4.prev = 3;\n            batch = (0,index_esm/* writeBatch */.wP)(firebase.db);\n            commentsRef = (0,index_esm/* collection */.rJ)(firebase.db, "".concat(collectionName, "_comments"));\n            newCommentRef = (0,index_esm/* doc */.H9)(commentsRef);\n            newComment = {\n              postId: postId,\n              content: content,\n              isPrivate: isPrivate,\n              authorId: currentUser.uid,\n              parentId: null,\n              createdAt: (0,index_esm/* serverTimestamp */.O5)(),\n              updatedAt: (0,index_esm/* serverTimestamp */.O5)(),\n              collectionName: collectionName // 알림을 위한 컬렉션 정보 저장\n            };\n            batch.set(newCommentRef, newComment);\n            postRef = (0,index_esm/* doc */.H9)(firebase.db, collectionName, postId);\n            batch.update(postRef, {\n              commentCount: (0,index_esm/* increment */.GV)(1)\n            });\n            _context4.next = 13;\n            return batch.commit();\n          case 13:\n            _context4.next = 15;\n            return fetchUserData(currentUser.uid);\n          case 15:\n            author = _context4.sent;\n            // 댓글 추가 후 바로 목록 업데이트\n            setComments(function (prev) {\n              return [commentsHook_objectSpread(commentsHook_objectSpread({\n                id: newCommentRef.id\n              }, newComment), {}, {\n                author: author,\n                createdAt: new Date(),\n                updatedAt: new Date()\n              })].concat(commentsHook_toConsumableArray(prev));\n            });\n\n            // 알림 전송 - 직접 HTTP API 호출로 변경\n            _context4.prev = 17;\n            // Firebase Functions 직접 참조\n            sendCommentNotification = (0,esm_index_esm/* httpsCallable */.Qg)(firebase/* functions */.Cn, \'sendCommentNotification\'); // 단순한 객체로 데이터 구성\n            // 문자열로 명시적 전달하여 타입 문제 방지\n            notificationData = {\n              commentId: String(newCommentRef.id),\n              postId: String(postId),\n              collectionName: String(collectionName)\n            }; // 함수 호출\n            _context4.next = 22;\n            return sendCommentNotification(notificationData);\n          case 22:\n            result = _context4.sent;\n            console.log("알림 전송 성공:", result.data);\n            _context4.next = 29;\n            break;\n          case 26:\n            _context4.prev = 26;\n            _context4.t0 = _context4["catch"](17);\n            console.error(\'알림 전송 오류:\', _context4.t0);\n          case 29:\n            return _context4.abrupt("return", newCommentRef.id);\n          case 32:\n            _context4.prev = 32;\n            _context4.t1 = _context4["catch"](3);\n            console.error("Error adding comment:", _context4.t1);\n            setError(_context4.t1);\n            throw _context4.t1;\n          case 37:\n          case "end":\n            return _context4.stop();\n        }\n      }, _callee4, null, [[3, 32], [17, 26]]);\n    }));\n    return function addComment(_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  // 답글 작성\n  var addReply = /*#__PURE__*/function () {\n    var _ref5 = commentsHook_asyncToGenerator(/*#__PURE__*/commentsHook_regeneratorRuntime().mark(function _callee5(parentId, content, parentIsPrivate) {\n      var batch, commentsRef, newReplyRef, newReply, postRef, sendCommentNotification, notificationData, result;\n      return commentsHook_regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            if (currentUser) {\n              _context5.next = 2;\n              break;\n            }\n            throw new Error("로그인이 필요합니다.");\n          case 2:\n            _context5.prev = 2;\n            batch = (0,index_esm/* writeBatch */.wP)(firebase.db);\n            commentsRef = (0,index_esm/* collection */.rJ)(firebase.db, "".concat(collectionName, "_comments"));\n            newReplyRef = (0,index_esm/* doc */.H9)(commentsRef);\n            newReply = {\n              postId: postId,\n              content: content,\n              isPrivate: parentIsPrivate,\n              authorId: currentUser.uid,\n              parentId: parentId,\n              createdAt: (0,index_esm/* serverTimestamp */.O5)(),\n              updatedAt: (0,index_esm/* serverTimestamp */.O5)(),\n              collectionName: collectionName // 알림을 위한 컬렉션 정보 저장\n            };\n            batch.set(newReplyRef, newReply);\n            postRef = (0,index_esm/* doc */.H9)(firebase.db, collectionName, postId);\n            batch.update(postRef, {\n              commentCount: (0,index_esm/* increment */.GV)(1)\n            });\n            _context5.next = 12;\n            return batch.commit();\n          case 12:\n            _context5.prev = 12;\n            // Firebase Functions 직접 참조\n            sendCommentNotification = (0,esm_index_esm/* httpsCallable */.Qg)(firebase/* functions */.Cn, \'sendCommentNotification\'); // 단순한 객체로 데이터 구성\n            // 문자열로 명시적 전달하여 타입 문제 방지\n            notificationData = {\n              commentId: String(newReplyRef.id),\n              postId: String(postId),\n              collectionName: String(collectionName)\n            }; // 함수 호출\n            _context5.next = 17;\n            return sendCommentNotification(notificationData);\n          case 17:\n            result = _context5.sent;\n            console.log("답글 알림 전송 성공:", result.data);\n            _context5.next = 24;\n            break;\n          case 21:\n            _context5.prev = 21;\n            _context5.t0 = _context5["catch"](12);\n            console.error(\'답글 알림 전송 오류:\', _context5.t0);\n          case 24:\n            return _context5.abrupt("return", newReplyRef.id);\n          case 27:\n            _context5.prev = 27;\n            _context5.t1 = _context5["catch"](2);\n            console.error("Error adding reply:", _context5.t1);\n            setError(_context5.t1);\n            throw _context5.t1;\n          case 32:\n          case "end":\n            return _context5.stop();\n        }\n      }, _callee5, null, [[2, 27], [12, 21]]);\n    }));\n    return function addReply(_x4, _x5, _x6) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  // 댓글 수정\n  var editComment = /*#__PURE__*/function () {\n    var _ref6 = commentsHook_asyncToGenerator(/*#__PURE__*/commentsHook_regeneratorRuntime().mark(function _callee6(commentId, newContent) {\n      var commentRef;\n      return commentsHook_regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            if (currentUser) {\n              _context6.next = 2;\n              break;\n            }\n            throw new Error("로그인이 필요합니다.");\n          case 2:\n            _context6.prev = 2;\n            commentRef = (0,index_esm/* doc */.H9)(firebase.db, "".concat(collectionName, "_comments"), commentId);\n            _context6.next = 6;\n            return (0,index_esm/* updateDoc */.mZ)(commentRef, {\n              content: newContent,\n              updatedAt: (0,index_esm/* serverTimestamp */.O5)()\n            });\n          case 6:\n            setComments(function (prev) {\n              return prev.map(function (comment) {\n                return comment.id === commentId ? commentsHook_objectSpread(commentsHook_objectSpread({}, comment), {}, {\n                  content: newContent,\n                  updatedAt: new Date()\n                }) : comment;\n              });\n            });\n            _context6.next = 14;\n            break;\n          case 9:\n            _context6.prev = 9;\n            _context6.t0 = _context6["catch"](2);\n            console.error("Error editing comment:", _context6.t0);\n            setError(_context6.t0);\n            throw _context6.t0;\n          case 14:\n          case "end":\n            return _context6.stop();\n        }\n      }, _callee6, null, [[2, 9]]);\n    }));\n    return function editComment(_x7, _x8) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  // 댓글 삭제\n  var deleteComment = /*#__PURE__*/function () {\n    var _ref7 = commentsHook_asyncToGenerator(/*#__PURE__*/commentsHook_regeneratorRuntime().mark(function _callee7(commentId) {\n      var commentsRef, batch, repliesQuery, repliesSnapshot, replyCount, postRef;\n      return commentsHook_regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            if (currentUser) {\n              _context7.next = 2;\n              break;\n            }\n            throw new Error("로그인이 필요합니다.");\n          case 2:\n            _context7.prev = 2;\n            commentsRef = (0,index_esm/* collection */.rJ)(firebase.db, "".concat(collectionName, "_comments"));\n            batch = (0,index_esm/* writeBatch */.wP)(firebase.db);\n            repliesQuery = (0,index_esm/* query */.P)(commentsRef, (0,index_esm/* where */._M)("parentId", "==", commentId));\n            _context7.next = 8;\n            return (0,index_esm/* getDocs */.GG)(repliesQuery);\n          case 8:\n            repliesSnapshot = _context7.sent;\n            replyCount = repliesSnapshot.docs.length;\n            repliesSnapshot.docs.forEach(function (replyDoc) {\n              batch["delete"]((0,index_esm/* doc */.H9)(firebase.db, "".concat(collectionName, "_comments"), replyDoc.id));\n            });\n\n            // 원본 댓글 삭제\n            batch["delete"]((0,index_esm/* doc */.H9)(firebase.db, "".concat(collectionName, "_comments"), commentId));\n            postRef = (0,index_esm/* doc */.H9)(firebase.db, collectionName, postId);\n            batch.update(postRef, {\n              commentCount: (0,index_esm/* increment */.GV)(-(1 + replyCount))\n            });\n            _context7.next = 16;\n            return batch.commit();\n          case 16:\n            setComments(function (prev) {\n              return prev.filter(function (comment) {\n                return comment.id !== commentId;\n              });\n            });\n            _context7.next = 24;\n            break;\n          case 19:\n            _context7.prev = 19;\n            _context7.t0 = _context7["catch"](2);\n            console.error("Error deleting comment:", _context7.t0);\n            setError(_context7.t0);\n            throw _context7.t0;\n          case 24:\n          case "end":\n            return _context7.stop();\n        }\n      }, _callee7, null, [[2, 19]]);\n    }));\n    return function deleteComment(_x9) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  // 댓글 더보기\n  var loadMoreComments = /*#__PURE__*/function () {\n    var _ref8 = commentsHook_asyncToGenerator(/*#__PURE__*/commentsHook_regeneratorRuntime().mark(function _callee9() {\n      var commentsRef, q, snapshot, newComments;\n      return commentsHook_regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            if (!(!lastDoc || !hasMore)) {\n              _context9.next = 2;\n              break;\n            }\n            return _context9.abrupt("return");\n          case 2:\n            _context9.prev = 2;\n            commentsRef = (0,index_esm/* collection */.rJ)(firebase.db, "".concat(collectionName, "_comments"));\n            q = (0,index_esm/* query */.P)(commentsRef, (0,index_esm/* where */._M)("postId", "==", postId), (0,index_esm/* where */._M)("parentId", "==", null), (0,index_esm/* orderBy */.My)("createdAt", "desc"), (0,index_esm/* startAfter */.HM)(lastDoc), (0,index_esm/* limit */.AB)(10));\n            _context9.next = 7;\n            return (0,index_esm/* getDocs */.GG)(q);\n          case 7:\n            snapshot = _context9.sent;\n            _context9.next = 10;\n            return Promise.all(snapshot.docs.map(/*#__PURE__*/function () {\n              var _ref9 = commentsHook_asyncToGenerator(/*#__PURE__*/commentsHook_regeneratorRuntime().mark(function _callee8(doc) {\n                var _data$createdAt2, _data$createdAt2$toDa, _data$updatedAt2, _data$updatedAt2$toDa;\n                var data, author;\n                return commentsHook_regeneratorRuntime().wrap(function _callee8$(_context8) {\n                  while (1) switch (_context8.prev = _context8.next) {\n                    case 0:\n                      data = doc.data();\n                      _context8.next = 3;\n                      return fetchUserData(data.authorId);\n                    case 3:\n                      author = _context8.sent;\n                      return _context8.abrupt("return", commentsHook_objectSpread(commentsHook_objectSpread({\n                        id: doc.id\n                      }, data), {}, {\n                        author: author,\n                        createdAt: ((_data$createdAt2 = data.createdAt) === null || _data$createdAt2 === void 0 || (_data$createdAt2$toDa = _data$createdAt2.toDate) === null || _data$createdAt2$toDa === void 0 ? void 0 : _data$createdAt2$toDa.call(_data$createdAt2)) || new Date(),\n                        updatedAt: ((_data$updatedAt2 = data.updatedAt) === null || _data$updatedAt2 === void 0 || (_data$updatedAt2$toDa = _data$updatedAt2.toDate) === null || _data$updatedAt2$toDa === void 0 ? void 0 : _data$updatedAt2$toDa.call(_data$updatedAt2)) || new Date()\n                      }));\n                    case 5:\n                    case "end":\n                      return _context8.stop();\n                  }\n                }, _callee8);\n              }));\n              return function (_x10) {\n                return _ref9.apply(this, arguments);\n              };\n            }()));\n          case 10:\n            newComments = _context9.sent;\n            setComments(function (prev) {\n              return [].concat(commentsHook_toConsumableArray(prev), commentsHook_toConsumableArray(newComments));\n            });\n            setLastDoc(snapshot.docs[snapshot.docs.length - 1]);\n            setHasMore(snapshot.docs.length === 10);\n            _context9.next = 20;\n            break;\n          case 16:\n            _context9.prev = 16;\n            _context9.t0 = _context9["catch"](2);\n            console.error("Error loading more comments:", _context9.t0);\n            setError(_context9.t0);\n          case 20:\n          case "end":\n            return _context9.stop();\n        }\n      }, _callee9, null, [[2, 16]]);\n    }));\n    return function loadMoreComments() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  return {\n    comments: comments,\n    loading: loading,\n    error: error,\n    hasMore: hasMore,\n    loadMoreComments: loadMoreComments,\n    addComment: addComment,\n    addReply: addReply,\n    editComment: editComment,\n    deleteComment: deleteComment\n  };\n};\n/* harmony default export */ const hooks_commentsHook = (commentsHook);\n;// ./src/components/comments/Comments.js\n\n\n\n\n\n\n\n\nvar Comments = function Comments(_ref) {\n  var postId = _ref.postId,\n    collectionName = _ref.collectionName,\n    postAuthorId = _ref.postAuthorId;\n  var _useAuth = (0,AuthContext/* useAuth */.As)(),\n    currentUser = _useAuth.currentUser;\n  var _commentsHook = hooks_commentsHook(postId, collectionName),\n    comments = _commentsHook.comments,\n    loading = _commentsHook.loading,\n    error = _commentsHook.error,\n    hasMore = _commentsHook.hasMore,\n    loadMoreComments = _commentsHook.loadMoreComments,\n    addComment = _commentsHook.addComment,\n    addReply = _commentsHook.addReply,\n    editComment = _commentsHook.editComment,\n    deleteComment = _commentsHook.deleteComment;\n  if (loading) {\n    return /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n      sx: {\n        textAlign: \'center\',\n        py: 4\n      }\n    }, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n      color: "text.secondary"\n    }, "\\uB313\\uAE00\\uC744 \\uBD88\\uB7EC\\uC624\\uB294 \\uC911..."));\n  }\n  if (collectionName === \'softcon_projects\') {\n    return /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n      color: "text.secondary",\n      textAlign: "center",\n      sx: {\n        py: 4\n      }\n    }, "\\uB313\\uAE00\\uC774 \\uD5C8\\uC6A9\\uB418\\uC9C0 \\uC54A\\uC740 \\uAC8C\\uC2DC\\uBB3C\\uC785\\uB2C8\\uB2E4.");\n  }\n  if (error) {\n    return /*#__PURE__*/react_default().createElement(Alert/* default */.A, {\n      severity: "error",\n      sx: {\n        mt: 2\n      }\n    }, "\\uB313\\uAE00\\uC744 \\uBD88\\uB7EC\\uC624\\uB294\\uB370 \\uC2E4\\uD328\\uD588\\uC2B5\\uB2C8\\uB2E4.");\n  }\n  return /*#__PURE__*/react_default().createElement("div", null, currentUser ? currentUser.role === \'default\' ? /*#__PURE__*/react_default().createElement(Alert/* default */.A, {\n    severity: "info",\n    sx: {\n      mb: 2\n    }\n  }, "\\uC2B9\\uC778\\uB41C \\uD68C\\uC0AC \\uACC4\\uC815\\uB9CC \\uB313\\uAE00\\uC744 \\uC791\\uC131\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.") : /*#__PURE__*/react_default().createElement(comments_CommentInput, {\n    onSubmit: addComment\n  }) : /*#__PURE__*/react_default().createElement(Alert/* default */.A, {\n    severity: "info",\n    sx: {\n      mb: 2\n    }\n  }, "\\uB313\\uAE00\\uC744 \\uC791\\uC131\\uD558\\uB824\\uBA74 \\uB85C\\uADF8\\uC778\\uC774 \\uD544\\uC694\\uD569\\uB2C8\\uB2E4."), /*#__PURE__*/react_default().createElement(comments_CommentList, {\n    comments: comments,\n    onEdit: editComment,\n    onDelete: deleteComment,\n    onReply: addReply,\n    currentUser: currentUser,\n    postAuthorId: postAuthorId,\n    hasMore: hasMore,\n    onLoadMore: loadMoreComments,\n    postId: postId,\n    collectionName: collectionName\n  }));\n};\n/* harmony default export */ const comments_Comments = (Comments);\n// EXTERNAL MODULE: ./node_modules/@mui/material/List/List.js + 1 modules\nvar List = __webpack_require__(9799);\n// EXTERNAL MODULE: ./node_modules/@mui/material/ListItem/ListItem.js + 4 modules\nvar ListItem = __webpack_require__(2794);\n// EXTERNAL MODULE: ./node_modules/@mui/material/ListItemAvatar/ListItemAvatar.js + 1 modules\nvar ListItemAvatar = __webpack_require__(1471);\n// EXTERNAL MODULE: ./node_modules/@mui/material/ListItemText/ListItemText.js\nvar ListItemText = __webpack_require__(2241);\n// EXTERNAL MODULE: ./node_modules/@mui/material/Popover/Popover.js + 1 modules\nvar Popover = __webpack_require__(1749);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/ThumbUp.js\nvar ThumbUp = __webpack_require__(4552);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/ThumbUpOutlined.js\nvar ThumbUpOutlined = __webpack_require__(5674);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Person.js\nvar Person = __webpack_require__(1432);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/ContentCopy.js\nvar ContentCopy = __webpack_require__(177);\n;// ./src/components/posts/CloneToPortfolioButton.js\nfunction CloneToPortfolioButton_typeof(o) { "@babel/helpers - typeof"; return CloneToPortfolioButton_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, CloneToPortfolioButton_typeof(o); }\nfunction CloneToPortfolioButton_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ CloneToPortfolioButton_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == CloneToPortfolioButton_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(CloneToPortfolioButton_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction CloneToPortfolioButton_toConsumableArray(r) { return CloneToPortfolioButton_arrayWithoutHoles(r) || CloneToPortfolioButton_iterableToArray(r) || CloneToPortfolioButton_unsupportedIterableToArray(r) || CloneToPortfolioButton_nonIterableSpread(); }\nfunction CloneToPortfolioButton_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction CloneToPortfolioButton_iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction CloneToPortfolioButton_arrayWithoutHoles(r) { if (Array.isArray(r)) return CloneToPortfolioButton_arrayLikeToArray(r); }\nfunction CloneToPortfolioButton_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction CloneToPortfolioButton_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { CloneToPortfolioButton_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { CloneToPortfolioButton_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction CloneToPortfolioButton_slicedToArray(r, e) { return CloneToPortfolioButton_arrayWithHoles(r) || CloneToPortfolioButton_iterableToArrayLimit(r, e) || CloneToPortfolioButton_unsupportedIterableToArray(r, e) || CloneToPortfolioButton_nonIterableRest(); }\nfunction CloneToPortfolioButton_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction CloneToPortfolioButton_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return CloneToPortfolioButton_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? CloneToPortfolioButton_arrayLikeToArray(r, a) : void 0; } }\nfunction CloneToPortfolioButton_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction CloneToPortfolioButton_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction CloneToPortfolioButton_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * 소프트콘 프로젝트를 사용자의 포트폴리오로 복제하는 버튼 컴포넌트\n * \n * @param {Object} props\n * @param {Object} props.postData \n * @param {string} props.postId\n */\nfunction CloneToPortfolioButton(_ref) {\n  var postData = _ref.postData,\n    postId = _ref.postId;\n  var _useState = (0,react.useState)(false),\n    _useState2 = CloneToPortfolioButton_slicedToArray(_useState, 2),\n    dialogOpen = _useState2[0],\n    setDialogOpen = _useState2[1];\n  var _useState3 = (0,react.useState)(false),\n    _useState4 = CloneToPortfolioButton_slicedToArray(_useState3, 2),\n    cloning = _useState4[0],\n    setCloning = _useState4[1];\n  var _useState5 = (0,react.useState)(false),\n    _useState6 = CloneToPortfolioButton_slicedToArray(_useState5, 2),\n    isTeamMember = _useState6[0],\n    setIsTeamMember = _useState6[1];\n  var _useState7 = (0,react.useState)(\'\'),\n    _useState8 = CloneToPortfolioButton_slicedToArray(_useState7, 2),\n    errorMessage = _useState8[0],\n    setErrorMessage = _useState8[1];\n  var _useAuth = (0,AuthContext/* useAuth */.As)(),\n    currentUser = _useAuth.currentUser;\n  var navigate = (0,chunk_SYFQ2XB5/* useNavigate */.Zp)();\n  var handleOpenDialog = function handleOpenDialog() {\n    // 팀원인지 확인\n    if (!currentUser) {\n      alert(\'로그인이 필요합니다.\');\n      return;\n    }\n    var isTeamMember = checkIfTeamMember(currentUser.email);\n    setIsTeamMember(isTeamMember);\n    if (!isTeamMember) {\n      setErrorMessage(\'이 프로젝트의 팀원만 복제할 수 있습니다.\');\n    } else {\n      setErrorMessage(\'\');\n    }\n    setDialogOpen(true);\n  };\n  var handleCloseDialog = function handleCloseDialog() {\n    if (!cloning) {\n      setDialogOpen(false);\n      setErrorMessage(\'\');\n    }\n  };\n\n  /**\n   * 사용자 이메일로 팀원인지 확인하는 함수\n   * 이메일 마지막 두 자리가 마스킹 처리(\'**\')되어 있는 점 고려\n   * \n   * @param {string} userEmail\n   * @return {boolean}\n   */\n  var checkIfTeamMember = function checkIfTeamMember(userEmail) {\n    if (!userEmail || !postData || !postData.team || !Array.isArray(postData.team)) {\n      return false;\n    }\n    var userEmailPrefix = userEmail.split(\'@\')[0];\n\n    // 팀 멤버 확인\n    return postData.team.some(function (member) {\n      // 이메일이 없으면 이름으로 확인 (이메일이 없는 경우 대비)\n      if (!member.email && member.name) {\n        return currentUser.displayName === member.name;\n      }\n      if (!member.email) return false;\n      var teamEmailParts = member.email.split(\'@\');\n      if (teamEmailParts.length !== 2) return false;\n      var teamEmailPrefix = teamEmailParts[0];\n      var unmaskedPart = teamEmailPrefix.replace(/\\*+$/, \'\');\n      return userEmailPrefix.startsWith(unmaskedPart);\n    });\n  };\n\n  // 복제 처리\n  var handleClone = /*#__PURE__*/function () {\n    var _ref2 = CloneToPortfolioButton_asyncToGenerator(/*#__PURE__*/CloneToPortfolioButton_regeneratorRuntime().mark(function _callee() {\n      var sourceDocRef, sourceDocSnap, sourceData, portfolioData, newDocRef;\n      return CloneToPortfolioButton_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (currentUser) {\n              _context.next = 3;\n              break;\n            }\n            alert(\'로그인이 필요합니다.\');\n            return _context.abrupt("return");\n          case 3:\n            if (isTeamMember) {\n              _context.next = 6;\n              break;\n            }\n            setErrorMessage(\'이 프로젝트의 팀원만 복제할 수 있습니다.\');\n            return _context.abrupt("return");\n          case 6:\n            _context.prev = 6;\n            setCloning(true);\n            sourceDocRef = (0,index_esm/* doc */.H9)(firebase.db, \'softcon_projects\', postId);\n            _context.next = 11;\n            return (0,index_esm/* getDoc */.x7)(sourceDocRef);\n          case 11:\n            sourceDocSnap = _context.sent;\n            if (sourceDocSnap.exists()) {\n              _context.next = 14;\n              break;\n            }\n            throw new Error(\'소프트콘 프로젝트를 찾을 수 없습니다.\');\n          case 14:\n            sourceData = sourceDocSnap.data();\n            portfolioData = {\n              title: "[\\uBCF5\\uC81C] ".concat(sourceData.title || \'소프트콘 프로젝트\'),\n              subtitle: sourceData.subtitle || \'소프트콘 프로젝트 복제본\',\n              content: sourceData.content || \'\',\n              files: sourceData.files || [],\n              links: sourceData.links || [],\n              thumbnailUrl: sourceData.thumbnailUrl || null,\n              keywords: [].concat(CloneToPortfolioButton_toConsumableArray(sourceData.keywords || []), [\'소프트콘프로젝트\']),\n              team: sourceData.team || [],\n              authorId: currentUser.uid,\n              likeCount: 0,\n              commentCount: 0,\n              createdAt: (0,index_esm/* serverTimestamp */.O5)(),\n              updatedAt: (0,index_esm/* serverTimestamp */.O5)(),\n              clonedFrom: {\n                id: postId,\n                type: \'softcon_projects\',\n                originalAuthor: sourceData.authorId,\n                clonedAt: (0,index_esm/* serverTimestamp */.O5)()\n              }\n            };\n            _context.next = 18;\n            return (0,index_esm/* addDoc */.gS)((0,index_esm/* collection */.rJ)(firebase.db, \'portfolios\'), portfolioData);\n          case 18:\n            newDocRef = _context.sent;\n            setCloning(false);\n            setDialogOpen(false);\n            alert(\'소프트콘 프로젝트가 내 포트폴리오로 복제되었습니다.\');\n            navigate("/portfolios/".concat(newDocRef.id));\n            _context.next = 30;\n            break;\n          case 25:\n            _context.prev = 25;\n            _context.t0 = _context["catch"](6);\n            console.error(\'프로젝트 복제 중 오류 발생:\', _context.t0);\n            setErrorMessage("\\uBCF5\\uC81C \\uC911 \\uC624\\uB958\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4: ".concat(_context.t0.message));\n            setCloning(false);\n          case 30:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, null, [[6, 25]]);\n    }));\n    return function handleClone() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return /*#__PURE__*/react_default().createElement((react_default()).Fragment, null, /*#__PURE__*/react_default().createElement(Tooltip/* default */.A, {\n    title: "\\uB0B4 \\uD3EC\\uD2B8\\uD3F4\\uB9AC\\uC624\\uB85C \\uBCF5\\uC81C\\uD558\\uAE30"\n  }, /*#__PURE__*/react_default().createElement(Button/* default */.A, {\n    variant: "outlined",\n    size: "small",\n    startIcon: /*#__PURE__*/react_default().createElement(ContentCopy/* default */.A, null),\n    onClick: handleOpenDialog,\n    sx: {\n      borderColor: \'#003876\',\n      // Ajou Blue 색상\n      color: \'#003876\',\n      \'&:hover\': {\n        backgroundColor: \'rgba(0, 56, 118, 0.04)\',\n        borderColor: \'#003876\'\n      }\n    }\n  }, "\\uBCF5\\uC81C\\uD558\\uAE30")), /*#__PURE__*/react_default().createElement(Dialog/* default */.A, {\n    open: dialogOpen,\n    onClose: handleCloseDialog,\n    fullWidth: true,\n    maxWidth: "sm"\n  }, /*#__PURE__*/react_default().createElement(DialogTitle/* default */.A, null, "\\uC18C\\uD504\\uD2B8\\uCF58 \\uD504\\uB85C\\uC81D\\uD2B8 \\uBCF5\\uC81C"), /*#__PURE__*/react_default().createElement(DialogContent/* default */.A, null, errorMessage && /*#__PURE__*/react_default().createElement(Alert/* default */.A, {\n    severity: "error",\n    sx: {\n      mb: 2\n    }\n  }, errorMessage), isTeamMember ? /*#__PURE__*/react_default().createElement((react_default()).Fragment, null, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "body1",\n    gutterBottom: true\n  }, "\\uC774 \\uC18C\\uD504\\uD2B8\\uCF58 \\uD504\\uB85C\\uC81D\\uD2B8\\uB97C \\uB0B4 \\uD3EC\\uD2B8\\uD3F4\\uB9AC\\uC624\\uB85C \\uBCF5\\uC81C\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?"), /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "body2",\n    color: "text.secondary"\n  }, "\\uBCF5\\uC81C\\uD558\\uBA74 \\uD504\\uB85C\\uC81D\\uD2B8\\uC758 \\uBAA8\\uB4E0 \\uB0B4\\uC6A9(\\uD14D\\uC2A4\\uD2B8, \\uC774\\uBBF8\\uC9C0, \\uB9C1\\uD06C \\uB4F1)\\uC774 \\uB0B4 \\uD3EC\\uD2B8\\uD3F4\\uB9AC\\uC624\\uB85C \\uBCF5\\uC0AC\\uB429\\uB2C8\\uB2E4. \\uBCF5\\uC81C \\uD6C4\\uC5D0\\uB294 \\uC790\\uC720\\uB86D\\uAC8C \\uC218\\uC815\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.")) : /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "body1"\n  }, "\\uC774 \\uD504\\uB85C\\uC81D\\uD2B8\\uB294 \\uD300\\uC6D0\\uB9CC \\uBCF5\\uC81C\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4. \\uD504\\uB85C\\uC81D\\uD2B8 \\uD300\\uC6D0\\uC73C\\uB85C \\uB4F1\\uB85D\\uB418\\uC5B4 \\uC788\\uC9C0 \\uC54A\\uC740 \\uAC83 \\uAC19\\uC2B5\\uB2C8\\uB2E4. \\uB9CC\\uC57D \\uD300\\uC6D0\\uC774\\uB77C\\uBA74 \\uC774\\uBA54\\uC77C \\uC8FC\\uC18C\\uB97C \\uD655\\uC778\\uD574 \\uC8FC\\uC138\\uC694.")), /*#__PURE__*/react_default().createElement(DialogActions/* default */.A, null, /*#__PURE__*/react_default().createElement(Button/* default */.A, {\n    onClick: handleCloseDialog,\n    disabled: cloning\n  }, "\\uCDE8\\uC18C"), /*#__PURE__*/react_default().createElement(Button/* default */.A, {\n    onClick: handleClone,\n    variant: "contained",\n    disabled: cloning || !isTeamMember,\n    color: "primary",\n    startIcon: cloning ? /*#__PURE__*/react_default().createElement(CircularProgress/* default */.A, {\n      size: 20,\n      color: "inherit"\n    }) : /*#__PURE__*/react_default().createElement(ContentCopy/* default */.A, null),\n    sx: {\n      bgcolor: \'#003876\',\n      // Ajou Blue 색상\n      \'&:hover\': {\n        bgcolor: \'#00294F\'\n      }\n    }\n  }, cloning ? \'복제 중...\' : \'복제하기\'))));\n}\n/* harmony default export */ const posts_CloneToPortfolioButton = (CloneToPortfolioButton);\n;// ./src/components/posts/view/PostHeader.js\nfunction PostHeader_typeof(o) { "@babel/helpers - typeof"; return PostHeader_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, PostHeader_typeof(o); }\nfunction PostHeader_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ PostHeader_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == PostHeader_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(PostHeader_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction PostHeader_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction PostHeader_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { PostHeader_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { PostHeader_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction PostHeader_slicedToArray(r, e) { return PostHeader_arrayWithHoles(r) || PostHeader_iterableToArrayLimit(r, e) || PostHeader_unsupportedIterableToArray(r, e) || PostHeader_nonIterableRest(); }\nfunction PostHeader_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction PostHeader_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return PostHeader_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? PostHeader_arrayLikeToArray(r, a) : void 0; } }\nfunction PostHeader_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction PostHeader_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction PostHeader_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n// src/components/posts/view/PostHeader.js - 관리자 삭제 기능 추가 (완성 버전)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * 게시물 헤더 컴포넌트 - 작성자 정보, 좋아요, 수정/삭제 버튼 등을 표시\n */\nvar PostHeader = function PostHeader(_ref) {\n  var _authorData$displayNa;\n  var postId = _ref.postId,\n    postData = _ref.postData,\n    authorData = _ref.authorData,\n    isLiked = _ref.isLiked,\n    likeCount = _ref.likeCount,\n    isPreview = _ref.isPreview,\n    currentUser = _ref.currentUser,\n    collectionName = _ref.collectionName,\n    onDelete = _ref.onDelete,\n    onLike = _ref.onLike,\n    onAuthorClick = _ref.onAuthorClick;\n  var navigate = (0,chunk_SYFQ2XB5/* useNavigate */.Zp)();\n  var _useState = (0,react.useState)(false),\n    _useState2 = PostHeader_slicedToArray(_useState, 2),\n    showLikesDialog = _useState2[0],\n    setShowLikesDialog = _useState2[1];\n  var _useState3 = (0,react.useState)([]),\n    _useState4 = PostHeader_slicedToArray(_useState3, 2),\n    likedUsers = _useState4[0],\n    setLikedUsers = _useState4[1];\n  var _useState5 = (0,react.useState)(false),\n    _useState6 = PostHeader_slicedToArray(_useState5, 2),\n    loadingLikes = _useState6[0],\n    setLoadingLikes = _useState6[1];\n  var _useState7 = (0,react.useState)(false),\n    _useState8 = PostHeader_slicedToArray(_useState7, 2),\n    deleteDialogOpen = _useState8[0],\n    setDeleteDialogOpen = _useState8[1];\n  var _useState9 = (0,react.useState)(false),\n    _useState10 = PostHeader_slicedToArray(_useState9, 2),\n    deleting = _useState10[0],\n    setDeleting = _useState10[1];\n\n  // 관리자 여부 확인 - 관리자는 모든 게시물 삭제 가능\n  var isAdmin = (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === \'ADMIN\';\n  // 작성자 또는 관리자인지 확인\n  var canEdit = (currentUser === null || currentUser === void 0 ? void 0 : currentUser.uid) === (authorData === null || authorData === void 0 ? void 0 : authorData.id);\n  var canDelete = canEdit || isAdmin;\n\n  // 소프트콘 프로젝트인지 확인\n  var isSoftconProject = collectionName === \'softcon_projects\';\n\n  // 좋아요 목록 보기\n  var handleOpenLikes = function handleOpenLikes() {\n    if (likeCount > 0) {\n      // 좋아요가 있을 때만 팝업 열기\n      setShowLikesDialog(true);\n      fetchLikedUsers();\n    }\n  };\n  var handleCloseLikes = function handleCloseLikes() {\n    setShowLikesDialog(false);\n  };\n\n  // 좋아요한 유저 목록 가져오기\n  var fetchLikedUsers = /*#__PURE__*/function () {\n    var _ref2 = PostHeader_asyncToGenerator(/*#__PURE__*/PostHeader_regeneratorRuntime().mark(function _callee() {\n      return PostHeader_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // 이 함수는 컴포넌트를 사용하는 상위 컴포넌트에서 props로 받거나,\n            // 여기서 직접 구현할 수 있습니다. 우선 상위 컴포넌트에서 받아와서 처리하도록 수정\n            try {\n              setLoadingLikes(true);\n              // 여기서 좋아요한 유저 목록을 가져오는 로직 구현\n              // ...\n\n              setLoadingLikes(false);\n            } catch (error) {\n              console.error(\'Error fetching liked users:\', error);\n              setLoadingLikes(false);\n            }\n          case 1:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function fetchLikedUsers() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  // 수정 페이지로 이동\n  var handleEdit = function handleEdit() {\n    navigate("/".concat(collectionName, "/").concat(postId, "/edit"));\n  };\n\n  // 삭제 확인 다이얼로그 열기\n  var handleDeleteClick = function handleDeleteClick() {\n    setDeleteDialogOpen(true);\n  };\n\n  // 삭제 처리\n  var handleDelete = /*#__PURE__*/function () {\n    var _ref3 = PostHeader_asyncToGenerator(/*#__PURE__*/PostHeader_regeneratorRuntime().mark(function _callee2() {\n      return PostHeader_regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!deleting) {\n              _context2.next = 2;\n              break;\n            }\n            return _context2.abrupt("return");\n          case 2:\n            _context2.prev = 2;\n            setDeleting(true);\n            _context2.next = 6;\n            return onDelete();\n          case 6:\n            setDeleteDialogOpen(false);\n            _context2.next = 12;\n            break;\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2["catch"](2);\n            console.error(\'Error deleting post:\', _context2.t0);\n          case 12:\n            _context2.prev = 12;\n            setDeleting(false);\n            return _context2.finish(12);\n          case 15:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[2, 9, 12, 15]]);\n    }));\n    return function handleDelete() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  // 유저 프로필 페이지로 이동\n  var handleUserClick = function handleUserClick(userId) {\n    handleCloseLikes();\n    if ((currentUser === null || currentUser === void 0 ? void 0 : currentUser.uid) === userId) {\n      navigate(\'/mypage\');\n    } else {\n      navigate("/profile/".concat(userId));\n    }\n  };\n  return /*#__PURE__*/react_default().createElement((react_default()).Fragment, null, /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      p: 3,\n      display: \'flex\',\n      justifyContent: \'space-between\',\n      alignItems: \'center\',\n      borderBottom: \'1px solid\',\n      borderColor: \'divider\'\n    }\n  }, /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    onClick: onAuthorClick,\n    sx: {\n      display: \'flex\',\n      alignItems: \'center\',\n      gap: 2,\n      cursor: \'pointer\',\n      \'&:hover\': {\n        opacity: 0.8\n      }\n    }\n  }, /*#__PURE__*/react_default().createElement(Avatar/* default */.A, {\n    src: authorData === null || authorData === void 0 ? void 0 : authorData.profileImage,\n    alt: authorData === null || authorData === void 0 ? void 0 : authorData.displayName,\n    sx: {\n      width: 48,\n      height: 48\n    }\n  }, !(authorData !== null && authorData !== void 0 && authorData.profileImage) && (authorData === null || authorData === void 0 || (_authorData$displayNa = authorData.displayName) === null || _authorData$displayNa === void 0 ? void 0 : _authorData$displayNa[0])), /*#__PURE__*/react_default().createElement(Box/* default */.A, null, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "subtitle1",\n    sx: {\n      fontWeight: 500\n    }\n  }, (authorData === null || authorData === void 0 ? void 0 : authorData.displayName) || \'사용자\'), /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "caption",\n    color: "text.secondary"\n  }, (authorData === null || authorData === void 0 ? void 0 : authorData.role) === \'STUDENT\' ? \'학생\' : (authorData === null || authorData === void 0 ? void 0 : authorData.role) === \'COMPANY\' ? \'기업\' : (authorData === null || authorData === void 0 ? void 0 : authorData.role) === \'PROFESSOR\' ? \'교수\' : \'관리자\'))), !isPreview && /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      display: \'flex\',\n      alignItems: \'center\',\n      gap: 2\n    }\n  }, isSoftconProject && (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === \'STUDENT\' && /*#__PURE__*/react_default().createElement(posts_CloneToPortfolioButton, {\n    postData: postData,\n    postId: postId\n  }), canDelete && /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      display: \'flex\',\n      gap: 1\n    }\n  }, canEdit && /*#__PURE__*/react_default().createElement(Tooltip/* default */.A, {\n    title: "\\uC218\\uC815"\n  }, /*#__PURE__*/react_default().createElement(IconButton/* default */.A, {\n    onClick: handleEdit,\n    sx: {\n      color: \'rgb(0, 51, 161)\',\n      \'&:hover\': {\n        backgroundColor: \'rgba(0, 51, 161, 0.04)\'\n      }\n    }\n  }, /*#__PURE__*/react_default().createElement(Edit/* default */.A, null))), /*#__PURE__*/react_default().createElement(Tooltip/* default */.A, {\n    title: isAdmin && !canEdit ? "관리자 권한으로 삭제" : "삭제"\n  }, /*#__PURE__*/react_default().createElement(IconButton/* default */.A, {\n    onClick: handleDeleteClick,\n    sx: {\n      color: \'#d32f2f\',\n      \'&:hover\': {\n        backgroundColor: \'rgba(211, 47, 47, 0.04)\'\n      }\n    }\n  }, isAdmin && !canEdit ? /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      position: \'relative\'\n    }\n  }, /*#__PURE__*/react_default().createElement(Delete/* default */.A, null), /*#__PURE__*/react_default().createElement(AdminPanelSettings/* default */.A, {\n    sx: {\n      position: \'absolute\',\n      bottom: -8,\n      right: -8,\n      fontSize: 16,\n      color: \'#d32f2f\',\n      backgroundColor: \'white\',\n      borderRadius: \'50%\'\n    }\n  })) : /*#__PURE__*/react_default().createElement(Delete/* default */.A, null)))), /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      display: \'flex\',\n      alignItems: \'center\',\n      gap: 1\n    }\n  }, currentUser ? /*#__PURE__*/react_default().createElement(Tooltip/* default */.A, {\n    title: isLiked ? \'좋아요 취소\' : \'좋아요\'\n  }, /*#__PURE__*/react_default().createElement(IconButton/* default */.A, {\n    onClick: onLike,\n    sx: {\n      color: isLiked ? \'rgb(0, 51, 161)\' : \'grey.500\',\n      \'&:hover\': {\n        bgcolor: \'rgba(0, 51, 161, 0.04)\'\n      }\n    }\n  }, isLiked ? /*#__PURE__*/react_default().createElement(ThumbUp/* default */.A, null) : /*#__PURE__*/react_default().createElement(ThumbUpOutlined/* default */.A, null))) : /*#__PURE__*/react_default().createElement(Tooltip/* default */.A, {\n    title: "\\uB85C\\uADF8\\uC778\\uC774 \\uD544\\uC694\\uD569\\uB2C8\\uB2E4"\n  }, /*#__PURE__*/react_default().createElement("span", null, /*#__PURE__*/react_default().createElement(IconButton/* default */.A, {\n    disabled: true\n  }, /*#__PURE__*/react_default().createElement(ThumbUpOutlined/* default */.A, null)))), /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "body2",\n    color: "text.secondary",\n    onClick: handleOpenLikes,\n    className: "likes-trigger",\n    sx: {\n      cursor: \'pointer\',\n      \'&:hover\': {\n        color: \'rgb(0, 51, 161)\',\n        textDecoration: \'underline\'\n      }\n    }\n  }, likeCount)))), /*#__PURE__*/react_default().createElement(Popover/* default */.Ay, {\n    open: showLikesDialog,\n    onClose: handleCloseLikes,\n    anchorEl: document.querySelector(\'.likes-trigger\'),\n    anchorOrigin: {\n      vertical: \'bottom\',\n      horizontal: \'center\'\n    },\n    transformOrigin: {\n      vertical: \'top\',\n      horizontal: \'center\'\n    },\n    PaperProps: {\n      sx: {\n        width: 250,\n        maxHeight: 300,\n        overflow: \'auto\',\n        mt: 1,\n        boxShadow: \'0 4px 20px rgba(0, 0, 0, 0.15)\',\n        borderRadius: \'12px\',\n        \'&::-webkit-scrollbar\': {\n          width: \'6px\'\n        },\n        \'&::-webkit-scrollbar-thumb\': {\n          backgroundColor: \'rgba(0, 0, 0, 0.2)\',\n          borderRadius: \'3px\'\n        }\n      }\n    }\n  }, loadingLikes ? /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      p: 2,\n      textAlign: \'center\'\n    }\n  }, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "body2",\n    color: "text.secondary"\n  }, "Loading...")) : likedUsers.length === 0 ? /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      p: 2,\n      textAlign: \'center\'\n    }\n  }, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "body2",\n    color: "text.secondary"\n  }, "\\uC544\\uC9C1 \\uC88B\\uC544\\uC694\\uD55C \\uC0AC\\uC6A9\\uC790\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.")) : /*#__PURE__*/react_default().createElement(List/* default */.A, {\n    sx: {\n      pt: 1,\n      pb: 1\n    }\n  }, likedUsers.map(function (user) {\n    return /*#__PURE__*/react_default().createElement(ListItem/* default */.Ay, {\n      button: true,\n      onClick: function onClick() {\n        return handleUserClick(user.id);\n      },\n      key: user.id,\n      sx: {\n        px: 2,\n        \'&:hover\': {\n          backgroundColor: \'rgba(0, 51, 161, 0.04)\'\n        }\n      }\n    }, /*#__PURE__*/react_default().createElement(ListItemAvatar/* default */.A, null, /*#__PURE__*/react_default().createElement(Avatar/* default */.A, {\n      src: user.profileImage,\n      alt: user.displayName,\n      sx: {\n        width: 32,\n        height: 32\n      }\n    }, !user.profileImage && /*#__PURE__*/react_default().createElement(Person/* default */.A, {\n      sx: {\n        fontSize: 20\n      }\n    }))), /*#__PURE__*/react_default().createElement(ListItemText/* default */.A, {\n      primary: user.displayName,\n      primaryTypographyProps: {\n        variant: \'body2\',\n        sx: {\n          fontWeight: 500\n        }\n      }\n    }));\n  }))), /*#__PURE__*/react_default().createElement(Dialog/* default */.A, {\n    open: deleteDialogOpen,\n    onClose: function onClose() {\n      return setDeleteDialogOpen(false);\n    },\n    "aria-labelledby": "delete-dialog-title",\n    "aria-describedby": "delete-dialog-description"\n  }, /*#__PURE__*/react_default().createElement(DialogTitle/* default */.A, {\n    id: "delete-dialog-title"\n  }, isAdmin && !canEdit ? "관리자 권한으로 삭제" : "게시글 삭제"), /*#__PURE__*/react_default().createElement(DialogContent/* default */.A, null, /*#__PURE__*/react_default().createElement(DialogContentText/* default */.A, {\n    id: "delete-dialog-description"\n  }, isAdmin && !canEdit ? /*#__PURE__*/react_default().createElement((react_default()).Fragment, null, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "body1",\n    gutterBottom: true\n  }, "\\uAD00\\uB9AC\\uC790 \\uAD8C\\uD55C\\uC73C\\uB85C \\uC774 \\uAC8C\\uC2DC\\uAE00\\uC744 \\uC0AD\\uC81C\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?"), /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    color: "error",\n    variant: "body2"\n  }, "\\uAD00\\uB9AC\\uC790 \\uAD8C\\uD55C\\uC73C\\uB85C \\uC0AD\\uC81C\\uB41C \\uAC8C\\uC2DC\\uAE00\\uC740 \\uBCF5\\uAD6C\\uD560 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.")) : "정말로 이 게시글을 삭제하시겠습니까? 삭제된 게시글은 복구할 수 없습니다.")), /*#__PURE__*/react_default().createElement(DialogActions/* default */.A, null, /*#__PURE__*/react_default().createElement(Button/* default */.A, {\n    onClick: function onClick() {\n      return setDeleteDialogOpen(false);\n    },\n    disabled: deleting\n  }, "\\uCDE8\\uC18C"), /*#__PURE__*/react_default().createElement(Button/* default */.A, {\n    onClick: handleDelete,\n    color: "error",\n    disabled: deleting,\n    autoFocus: true\n  }, "\\uC0AD\\uC81C"))));\n};\n/* harmony default export */ const view_PostHeader = (PostHeader);\n// EXTERNAL MODULE: ./node_modules/@mui/material/styles/useTheme.js\nvar useTheme = __webpack_require__(4675);\n// EXTERNAL MODULE: ./node_modules/react-markdown/lib/index.js + 129 modules\nvar lib = __webpack_require__(2230);\n;// ./src/components/posts/view/PostContent.js\n\n\n\n\n\n\n/**\n * 게시물 내용 컴포넌트 - 제목, 부제목, 썸네일 이미지, 마크다운 내용 표시\n */\nvar PostContent = function PostContent(_ref) {\n  var title = _ref.title,\n    subtitle = _ref.subtitle,\n    content = _ref.content,\n    thumbnailUrl = _ref.thumbnailUrl,\n    getDisplayImage = _ref.getDisplayImage;\n  var theme = (0,useTheme/* default */.A)();\n  return /*#__PURE__*/react_default().createElement((react_default()).Fragment, null, /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      position: \'relative\',\n      textAlign: \'center\',\n      p: 6\n    }\n  }, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "h1",\n    sx: {\n      color: \'#0066CC\',\n      fontSize: \'2.5rem\',\n      fontWeight: 700,\n      mb: 2,\n      fontFamily: "\'Noto Sans KR\', sans-serif",\n      wordBreak: \'break-word\',\n      whiteSpace: \'pre-wrap\'\n    }\n  }, title), subtitle && /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "subtitle1",\n    sx: {\n      color: \'#0066CC\',\n      fontSize: \'1.1rem\',\n      fontWeight: 400,\n      opacity: 0.9,\n      fontFamily: "\'Noto Sans KR\', sans-serif",\n      wordBreak: \'break-word\',\n      whiteSpace: \'pre-wrap\'\n    }\n  }, subtitle)), thumbnailUrl && thumbnailUrl !== \'markdown-image\' && /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      width: \'100%\',\n      display: \'flex\',\n      justifyContent: \'center\',\n      alignItems: \'center\',\n      mb: 4,\n      padding: \'20px 0\'\n    }\n  }, /*#__PURE__*/react_default().createElement("img", {\n    src: thumbnailUrl,\n    alt: "Post thumbnail",\n    style: {\n      maxWidth: \'100%\',\n      maxHeight: \'600px\',\n      objectFit: \'contain\',\n      display: \'block\'\n    }\n  })), /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      px: 4,\n      py: 6\n    }\n  }, /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      maxWidth: \'800px\',\n      margin: \'0 auto\',\n      \'& img\': {\n        maxWidth: \'100%\',\n        height: \'auto\',\n        borderRadius: theme.shape.borderRadius,\n        my: 2\n      },\n      \'& h1, & h2, & h3, & h4, & h5, & h6\': {\n        color: theme.palette.text.primary,\n        mt: 4,\n        mb: 2,\n        wordBreak: \'break-word\'\n      },\n      \'& p\': {\n        mb: 2,\n        lineHeight: 1.7,\n        wordBreak: \'break-word\',\n        whiteSpace: \'pre-wrap\'\n      },\n      \'& a\': {\n        color: theme.palette.primary.main,\n        textDecoration: \'none\',\n        wordBreak: \'break-all\',\n        \'&:hover\': {\n          textDecoration: \'underline\'\n        }\n      },\n      \'& pre, & code\': {\n        whiteSpace: \'pre-wrap\',\n        wordBreak: \'break-word\',\n        overflowX: \'auto\'\n      }\n    }\n  }, /*#__PURE__*/react_default().createElement(lib/* Markdown */.oz, null, content))));\n};\n/* harmony default export */ const view_PostContent = (PostContent);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Code.js\nvar Code = __webpack_require__(4680);\n;// ./src/components/posts/view/PostKeywords.js\n\n\n\n\n\n\n/**\n * 게시물 키워드 컴포넌트 - 기술 스택이나 주요 키워드 태그 표시\n */\nvar PostKeywords = function PostKeywords(_ref) {\n  var _ref$keywords = _ref.keywords,\n    keywords = _ref$keywords === void 0 ? [] : _ref$keywords;\n  if (!keywords || keywords.length === 0) return null;\n  return /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      px: 4,\n      py: 5,\n      borderTop: \'1px solid\',\n      borderColor: \'divider\',\n      background: \'linear-gradient(to right, #f8f9fa, #ffffff)\'\n    }\n  }, /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      maxWidth: \'800px\',\n      margin: \'0 auto\',\n      display: \'flex\',\n      flexDirection: \'column\',\n      gap: 3\n    }\n  }, /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      display: \'flex\',\n      alignItems: \'center\',\n      gap: 1.5,\n      mb: 1\n    }\n  }, /*#__PURE__*/react_default().createElement(Code/* default */.A, {\n    sx: {\n      color: \'#0066CC\',\n      fontSize: \'1.5rem\'\n    }\n  }), /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "h6",\n    sx: {\n      fontWeight: 600,\n      color: \'#1a1a1a\',\n      fontSize: \'1.1rem\',\n      letterSpacing: \'0.3px\'\n    }\n  }, "Keywords")), /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      display: \'flex\',\n      flexWrap: \'wrap\',\n      gap: 1.2,\n      px: 0.5\n    }\n  }, keywords.map(function (keyword, index) {\n    return /*#__PURE__*/react_default().createElement(Chip/* default */.A, {\n      key: "".concat(keyword, "-").concat(index),\n      label: keyword,\n      sx: {\n        bgcolor: \'rgba(0, 102, 204, 0.08)\',\n        color: \'#0066CC\',\n        border: \'1px solid rgba(0, 102, 204, 0.2)\',\n        borderRadius: \'8px\',\n        \'& .MuiChip-label\': {\n          px: 1.5,\n          py: 0.8,\n          fontSize: \'0.875rem\',\n          fontWeight: 500\n        }\n      }\n    });\n  }))));\n};\n/* harmony default export */ const view_PostKeywords = (PostKeywords);\n// EXTERNAL MODULE: ./node_modules/@mui/material/Grid/Grid.js + 2 modules\nvar Grid = __webpack_require__(8239);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Close.js\nvar Close = __webpack_require__(9781);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Image.js\nvar Image = __webpack_require__(5072);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/FilePresent.js\nvar FilePresent = __webpack_require__(7328);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Download.js\nvar Download = __webpack_require__(609);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/PictureAsPdf.js\nvar PictureAsPdf = __webpack_require__(8845);\n;// ./src/components/posts/view/PostAttachments.js\nfunction PostAttachments_slicedToArray(r, e) { return PostAttachments_arrayWithHoles(r) || PostAttachments_iterableToArrayLimit(r, e) || PostAttachments_unsupportedIterableToArray(r, e) || PostAttachments_nonIterableRest(); }\nfunction PostAttachments_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction PostAttachments_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return PostAttachments_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? PostAttachments_arrayLikeToArray(r, a) : void 0; } }\nfunction PostAttachments_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction PostAttachments_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction PostAttachments_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * 게시물 첨부 파일 컴포넌트 - 이미지 및 다운로드 가능한 첨부 파일 표시\n * 이미지는 클릭 시 미리보기, 다른 파일은 클릭 시 바로 다운로드\n */\nvar PostAttachments = function PostAttachments(_ref) {\n  var _ref$files = _ref.files,\n    files = _ref$files === void 0 ? [] : _ref$files;\n  var _useState = (0,react.useState)(null),\n    _useState2 = PostAttachments_slicedToArray(_useState, 2),\n    selectedFile = _useState2[0],\n    setSelectedFile = _useState2[1];\n  if (!files || files.length === 0) return null;\n\n  // 파일 클릭 처리 - 이미지는 미리보기, 다른 파일은 바로 다운로드\n  var handleFileClick = function handleFileClick(file) {\n    if (file.type === \'IMAGE\') {\n      // 이미지인 경우 미리보기 다이얼로그 열기\n      setSelectedFile(file);\n    } else {\n      // 다른 파일 타입은 바로 다운로드\n      handleDownload(file);\n    }\n  };\n\n  // PDF 파일도 처리\n  var isPdfFile = function isPdfFile(file) {\n    return file.type === \'PDF\' || file.filename && file.filename.toLowerCase().endsWith(\'.pdf\') || file.url && file.url.toLowerCase().includes(\'.pdf\');\n  };\n\n  // 미리보기 닫기\n  var handleClosePreview = function handleClosePreview() {\n    setSelectedFile(null);\n  };\n\n  // 파일 다운로드\n  var handleDownload = function handleDownload(file) {\n    window.open(file.url, \'_blank\');\n  };\n  return /*#__PURE__*/react_default().createElement((react_default()).Fragment, null, /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      px: 4,\n      py: 4,\n      bgcolor: \'grey.50\',\n      borderTop: \'1px solid\',\n      borderColor: \'divider\'\n    }\n  }, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "h6",\n    gutterBottom: true,\n    sx: {\n      mb: 3\n    }\n  }, "\\uCCA8\\uBD80\\uD30C\\uC77C"), /*#__PURE__*/react_default().createElement(Grid/* default */.Ay, {\n    container: true,\n    spacing: 2\n  }, files.map(function (file) {\n    return /*#__PURE__*/react_default().createElement(Grid/* default */.Ay, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      md: 4,\n      key: file.fileId || file.url\n    }, /*#__PURE__*/react_default().createElement(Paper/* default */.A, {\n      elevation: 0,\n      onClick: function onClick() {\n        return handleFileClick(file);\n      },\n      sx: {\n        p: 2,\n        cursor: \'pointer\',\n        border: \'1px solid\',\n        borderColor: \'divider\',\n        \'&:hover\': {\n          bgcolor: \'grey.100\'\n        },\n        display: \'flex\',\n        justifyContent: \'space-between\',\n        alignItems: \'center\'\n      }\n    }, /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n      sx: {\n        display: \'flex\',\n        alignItems: \'center\',\n        gap: 2,\n        flex: 1\n      }\n    }, file.type === \'IMAGE\' ? /*#__PURE__*/react_default().createElement(Image/* default */.A, {\n      color: "primary"\n    }) : isPdfFile(file) ? /*#__PURE__*/react_default().createElement(PictureAsPdf/* default */.A, {\n      sx: {\n        color: \'#e53935\'\n      }\n    }) : /*#__PURE__*/react_default().createElement(FilePresent/* default */.A, {\n      color: "primary"\n    }), /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n      sx: {\n        flex: 1\n      }\n    }, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n      variant: "body2",\n      noWrap: true\n    }, file.filename), file.description && /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n      variant: "caption",\n      color: "text.secondary",\n      display: "block"\n    }, file.description))), file.type !== \'IMAGE\' && /*#__PURE__*/react_default().createElement(Download/* default */.A, {\n      color: "primary",\n      fontSize: "small",\n      sx: {\n        opacity: 0.7,\n        ml: 1\n      }\n    })));\n  }))), /*#__PURE__*/react_default().createElement(Dialog/* default */.A, {\n    open: Boolean(selectedFile),\n    onClose: handleClosePreview,\n    maxWidth: "lg",\n    fullWidth: true\n  }, /*#__PURE__*/react_default().createElement(DialogTitle/* default */.A, {\n    sx: {\n      display: \'flex\',\n      justifyContent: \'space-between\',\n      alignItems: \'center\'\n    }\n  }, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "h6"\n  }, selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile.filename), /*#__PURE__*/react_default().createElement(IconButton/* default */.A, {\n    onClick: handleClosePreview,\n    size: "small"\n  }, /*#__PURE__*/react_default().createElement(Close/* default */.A, null))), /*#__PURE__*/react_default().createElement(DialogContent/* default */.A, null, /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      display: \'flex\',\n      justifyContent: \'center\',\n      alignItems: \'center\',\n      minHeight: 400\n    }\n  }, /*#__PURE__*/react_default().createElement("img", {\n    src: selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile.url,\n    alt: selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile.filename,\n    style: {\n      maxWidth: \'100%\',\n      maxHeight: \'70vh\',\n      objectFit: \'cover\'\n    }\n  }))), /*#__PURE__*/react_default().createElement(DialogActions/* default */.A, null, /*#__PURE__*/react_default().createElement(Button/* default */.A, {\n    onClick: handleClosePreview\n  }, "\\uB2EB\\uAE30"), /*#__PURE__*/react_default().createElement(Button/* default */.A, {\n    variant: "contained",\n    startIcon: /*#__PURE__*/react_default().createElement(Download/* default */.A, null),\n    onClick: function onClick() {\n      return handleDownload(selectedFile);\n    }\n  }, "\\uB2E4\\uC6B4\\uB85C\\uB4DC"))));\n};\n/* harmony default export */ const view_PostAttachments = (PostAttachments);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Link.js\nvar Link = __webpack_require__(3289);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/GitHub.js\nvar GitHub = __webpack_require__(3294);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/YouTube.js\nvar YouTube = __webpack_require__(1952);\n// EXTERNAL MODULE: ./node_modules/@mui/icons-material/OpenInNew.js\nvar OpenInNew = __webpack_require__(1190);\n;// ./src/components/posts/view/PostLinks.js\nfunction PostLinks_toConsumableArray(r) { return PostLinks_arrayWithoutHoles(r) || PostLinks_iterableToArray(r) || PostLinks_unsupportedIterableToArray(r) || PostLinks_nonIterableSpread(); }\nfunction PostLinks_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction PostLinks_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return PostLinks_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? PostLinks_arrayLikeToArray(r, a) : void 0; } }\nfunction PostLinks_iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction PostLinks_arrayWithoutHoles(r) { if (Array.isArray(r)) return PostLinks_arrayLikeToArray(r); }\nfunction PostLinks_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n\n\n\n\n\n\n\n\n\n\n\n/**\n * 게시물 링크 컴포넌트 - 관련 링크(GitHub, YouTube 등) 표시\n * 클릭 시 바로 새 탭에서 링크 열기\n */\nvar PostLinks = function PostLinks(_ref) {\n  var _ref$links = _ref.links,\n    links = _ref$links === void 0 ? [] : _ref$links,\n    sourceUrl = _ref.sourceUrl;\n  var allLinks = [].concat(PostLinks_toConsumableArray(links), [sourceUrl ? {\n    linkId: "source-url",\n    url: sourceUrl,\n    type: "SOURCE",\n    title: "소프트콘 원본 페이지"\n  } : null]).filter(Boolean);\n  if (!links || links.length === 0) return null;\n\n  // 링크 타입에 따른 아이콘 선택\n  var getLinkIcon = function getLinkIcon(type) {\n    switch (type) {\n      case \'GITHUB\':\n        return /*#__PURE__*/react_default().createElement(GitHub/* default */.A, {\n          color: "primary"\n        });\n      case \'YOUTUBE\':\n      case \'VIDEO\':\n        return /*#__PURE__*/react_default().createElement(YouTube/* default */.A, {\n          color: "error"\n        });\n      default:\n        return /*#__PURE__*/react_default().createElement(Link/* default */.A, {\n          color: "primary"\n        });\n    }\n  };\n\n  // 링크 클릭 처리 - 바로 새 탭에서 열기\n  var handleLinkClick = function handleLinkClick(url, e) {\n    e.preventDefault();\n    window.open(url, \'_blank\');\n  };\n  // 링크 타이틀 표시\n  var getLinkTitle = function getLinkTitle(link) {\n    if (link.title) return link.title;\n    if (link.type === \'GITHUB\') return \'GitHub 저장소\';\n    if (link.type === \'YOUTUBE\' || link.type === \'VIDEO\') return \'시연 영상\';\n    if (link.url.toLowerCase().includes(\'.pdf\')) return \'PDF 문서\';\n    return \'관련 링크\';\n  };\n  return /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      px: 4,\n      py: 4,\n      borderTop: \'1px solid\',\n      borderColor: \'divider\'\n    }\n  }, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "h6",\n    gutterBottom: true,\n    sx: {\n      mb: 3\n    }\n  }, "\\uAD00\\uB828 \\uB9C1\\uD06C"), /*#__PURE__*/react_default().createElement(Grid/* default */.Ay, {\n    container: true,\n    spacing: 2\n  }, allLinks.map(function (link, index) {\n    return /*#__PURE__*/react_default().createElement(Grid/* default */.Ay, {\n      item: true,\n      xs: 12,\n      key: link.linkId || link.url || index\n    }, /*#__PURE__*/react_default().createElement(Paper/* default */.A, {\n      elevation: 0,\n      component: "a",\n      href: link.url,\n      onClick: function onClick(e) {\n        return handleLinkClick(link.url, e);\n      },\n      target: "_blank",\n      rel: "noopener noreferrer",\n      sx: {\n        p: 2,\n        display: \'flex\',\n        alignItems: \'center\',\n        gap: 2,\n        textDecoration: \'none\',\n        color: \'inherit\',\n        border: \'1px solid\',\n        borderColor: \'divider\',\n        \'&:hover\': {\n          bgcolor: \'grey.50\'\n        }\n      }\n    }, getLinkIcon(link.type), /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n      sx: {\n        flex: 1\n      }\n    }, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n      variant: "body2",\n      sx: {\n        fontWeight: 500\n      }\n    }, getLinkTitle(link)), /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n      variant: "caption",\n      color: "text.secondary",\n      sx: {\n        display: \'block\',\n        textDecoration: \'none\',\n        maxWidth: \'100%\',\n        overflow: \'hidden\',\n        textOverflow: \'ellipsis\'\n      }\n    }, link.url)), /*#__PURE__*/react_default().createElement(OpenInNew/* default */.A, {\n      sx: {\n        fontSize: 16,\n        color: \'text.secondary\'\n      }\n    })));\n  })));\n};\n/* harmony default export */ const view_PostLinks = (PostLinks);\n// EXTERNAL MODULE: ./src/hooks/useLike.js\nvar useLike = __webpack_require__(4333);\n;// ./src/hooks/usePostData.js\nfunction usePostData_typeof(o) { "@babel/helpers - typeof"; return usePostData_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, usePostData_typeof(o); }\nfunction usePostData_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ usePostData_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == usePostData_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(usePostData_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction usePostData_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction usePostData_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? usePostData_ownKeys(Object(t), !0).forEach(function (r) { usePostData_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : usePostData_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction usePostData_defineProperty(e, r, t) { return (r = usePostData_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction usePostData_toPropertyKey(t) { var i = usePostData_toPrimitive(t, "string"); return "symbol" == usePostData_typeof(i) ? i : i + ""; }\nfunction usePostData_toPrimitive(t, r) { if ("object" != usePostData_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != usePostData_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction usePostData_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction usePostData_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { usePostData_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { usePostData_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction usePostData_slicedToArray(r, e) { return usePostData_arrayWithHoles(r) || usePostData_iterableToArrayLimit(r, e) || usePostData_unsupportedIterableToArray(r, e) || usePostData_nonIterableRest(); }\nfunction usePostData_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction usePostData_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return usePostData_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? usePostData_arrayLikeToArray(r, a) : void 0; } }\nfunction usePostData_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction usePostData_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction usePostData_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n\n\n/**\n * 게시물 데이터를 로드하고 관리하는 커스텀 훅\n * @param {string} postId - 게시물 ID\n * @param {string} collectionName - 컬렉션 이름 (portfolios, labs, companies)\n * @param {Object} previewData - 미리보기 모드에서 사용할 데이터 (선택 사항)\n * @param {Object} previewAuthor - 미리보기 모드에서 사용할 작성자 정보 (선택 사항)\n */\nvar usePostData = function usePostData(postId, collectionName) {\n  var previewData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var previewAuthor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var _useAuth = (0,AuthContext/* useAuth */.As)(),\n    currentUser = _useAuth.currentUser;\n  var _useState = (0,react.useState)(previewData || null),\n    _useState2 = usePostData_slicedToArray(_useState, 2),\n    postData = _useState2[0],\n    setPostData = _useState2[1];\n  var _useState3 = (0,react.useState)(previewAuthor || null),\n    _useState4 = usePostData_slicedToArray(_useState3, 2),\n    authorData = _useState4[0],\n    setAuthorData = _useState4[1];\n  var _useState5 = (0,react.useState)(true),\n    _useState6 = usePostData_slicedToArray(_useState5, 2),\n    loading = _useState6[0],\n    setLoading = _useState6[1];\n  var _useState7 = (0,react.useState)(null),\n    _useState8 = usePostData_slicedToArray(_useState7, 2),\n    error = _useState8[0],\n    setError = _useState8[1];\n  var _useState9 = (0,react.useState)([]),\n    _useState10 = usePostData_slicedToArray(_useState9, 2),\n    likedUsers = _useState10[0],\n    setLikedUsers = _useState10[1];\n  var _useState11 = (0,react.useState)(false),\n    _useState12 = usePostData_slicedToArray(_useState11, 2),\n    loadingLikes = _useState12[0],\n    setLoadingLikes = _useState12[1];\n\n  // 좋아요 관련 훅 사용\n  var _useLike = (0,useLike/* default */.A)(postId, collectionName, (currentUser === null || currentUser === void 0 ? void 0 : currentUser.uid) || null),\n    isLiked = _useLike.isLiked,\n    likeCount = _useLike.likeCount,\n    toggleLike = _useLike.toggleLike;\n\n  // 초기 데이터 로딩\n  (0,react.useEffect)(function () {\n    var fetchPost = /*#__PURE__*/function () {\n      var _ref = usePostData_asyncToGenerator(/*#__PURE__*/usePostData_regeneratorRuntime().mark(function _callee() {\n        var postDoc, data, authorDoc;\n        return usePostData_regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!previewData) {\n                _context.next = 5;\n                break;\n              }\n              setPostData(previewData);\n              setAuthorData(previewAuthor);\n              setLoading(false);\n              return _context.abrupt("return");\n            case 5:\n              if (!(!collectionName || !postId)) {\n                _context.next = 8;\n                break;\n              }\n              setLoading(false);\n              return _context.abrupt("return");\n            case 8:\n              _context.prev = 8;\n              setLoading(true);\n              setError(null);\n\n              // 게시물 데이터 가져오기\n              _context.next = 13;\n              return (0,index_esm/* getDoc */.x7)((0,index_esm/* doc */.H9)(firebase.db, collectionName, postId));\n            case 13:\n              postDoc = _context.sent;\n              if (!postDoc.exists()) {\n                _context.next = 24;\n                break;\n              }\n              data = postDoc.data();\n              setPostData(usePostData_objectSpread({\n                id: postDoc.id\n              }, data));\n\n              // 작성자 정보 가져오기\n              if (!data.authorId) {\n                _context.next = 22;\n                break;\n              }\n              _context.next = 20;\n              return (0,index_esm/* getDoc */.x7)((0,index_esm/* doc */.H9)(firebase.db, \'users\', data.authorId));\n            case 20:\n              authorDoc = _context.sent;\n              if (authorDoc.exists()) {\n                setAuthorData(usePostData_objectSpread({\n                  id: authorDoc.id\n                }, authorDoc.data()));\n              }\n            case 22:\n              _context.next = 25;\n              break;\n            case 24:\n              setError(\'게시물을 찾을 수 없습니다.\');\n            case 25:\n              _context.next = 31;\n              break;\n            case 27:\n              _context.prev = 27;\n              _context.t0 = _context["catch"](8);\n              console.error(\'Error fetching post:\', _context.t0);\n              setError(\'게시물을 불러오는 중 오류가 발생했습니다.\');\n            case 31:\n              _context.prev = 31;\n              setLoading(false);\n              return _context.finish(31);\n            case 34:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, null, [[8, 27, 31, 34]]);\n      }));\n      return function fetchPost() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchPost();\n  }, [collectionName, postId, previewData, previewAuthor]);\n\n  // 좋아요한 사용자 목록 가져오기\n  var fetchLikedUsers = /*#__PURE__*/function () {\n    var _ref2 = usePostData_asyncToGenerator(/*#__PURE__*/usePostData_regeneratorRuntime().mark(function _callee3() {\n      var likesRef, q, likesSnapshot, usersPromises, users;\n      return usePostData_regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(!postId || previewData)) {\n              _context3.next = 2;\n              break;\n            }\n            return _context3.abrupt("return", []);\n          case 2:\n            _context3.prev = 2;\n            setLoadingLikes(true);\n            likesRef = (0,index_esm/* collection */.rJ)(firebase.db, \'likes\');\n            q = (0,index_esm/* query */.P)(likesRef, (0,index_esm/* where */._M)(\'postId\', \'==\', postId));\n            _context3.next = 8;\n            return (0,index_esm/* getDocs */.GG)(q);\n          case 8:\n            likesSnapshot = _context3.sent;\n            usersPromises = likesSnapshot.docs.map(/*#__PURE__*/function () {\n              var _ref3 = usePostData_asyncToGenerator(/*#__PURE__*/usePostData_regeneratorRuntime().mark(function _callee2(likeDoc) {\n                var userData, userDoc;\n                return usePostData_regeneratorRuntime().wrap(function _callee2$(_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      userData = likeDoc.data();\n                      _context2.next = 3;\n                      return (0,index_esm/* getDoc */.x7)((0,index_esm/* doc */.H9)(firebase.db, \'users\', userData.userId));\n                    case 3:\n                      userDoc = _context2.sent;\n                      if (!userDoc.exists()) {\n                        _context2.next = 6;\n                        break;\n                      }\n                      return _context2.abrupt("return", usePostData_objectSpread({\n                        id: userDoc.id\n                      }, userDoc.data()));\n                    case 6:\n                      return _context2.abrupt("return", null);\n                    case 7:\n                    case "end":\n                      return _context2.stop();\n                  }\n                }, _callee2);\n              }));\n              return function (_x) {\n                return _ref3.apply(this, arguments);\n              };\n            }());\n            _context3.next = 12;\n            return Promise.all(usersPromises);\n          case 12:\n            users = _context3.sent.filter(function (user) {\n              return user !== null;\n            });\n            setLikedUsers(users);\n            return _context3.abrupt("return", users);\n          case 17:\n            _context3.prev = 17;\n            _context3.t0 = _context3["catch"](2);\n            console.error(\'Error fetching liked users:\', _context3.t0);\n            return _context3.abrupt("return", []);\n          case 21:\n            _context3.prev = 21;\n            setLoadingLikes(false);\n            return _context3.finish(21);\n          case 24:\n          case "end":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[2, 17, 21, 24]]);\n    }));\n    return function fetchLikedUsers() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  // 마크다운 내용에서 첫 번째 이미지 URL 추출\n  var extractFirstImageFromMarkdown = function extractFirstImageFromMarkdown(markdownContent) {\n    if (!markdownContent) return null;\n\n    // 마크다운 이미지 형식 ![alt](url) 또는 <img src="url"> 패턴 찾기\n    var markdownImageRegex = /!\\[.*?\\]\\((.*?)\\)/;\n    var htmlImageRegex = /<img.*?src=["\'](.*?)["\']/;\n    var markdownMatch = markdownContent.match(markdownImageRegex);\n    var htmlMatch = markdownContent.match(htmlImageRegex);\n\n    // 마크다운 형식 이미지 우선, 없으면 HTML 형식 이미지 사용\n    if (markdownMatch && markdownMatch[1]) {\n      return markdownMatch[1];\n    } else if (htmlMatch && htmlMatch[1]) {\n      return htmlMatch[1];\n    }\n    return null;\n  };\n\n  // 게시물 이미지 URL 가져오기\n  var getDisplayImage = function getDisplayImage() {\n    var _postData$files;\n    if (!postData) return \'\';\n\n    // 1. 기존 썸네일 이미지가 있으면 사용\n    if (postData.thumbnail && postData.thumbnail !== \'undefined\' && postData.thumbnail !== \'markdown-image\') return postData.thumbnail;\n\n    // 2. 첨부 파일 중 이미지가 있으면 첫 번째 이미지 사용\n    var imageFile = (_postData$files = postData.files) === null || _postData$files === void 0 ? void 0 : _postData$files.find(function (file) {\n      return file.type === \'IMAGE\' && file.url;\n    });\n    if (imageFile) return imageFile.url;\n\n    // 3. 마크다운 내용에서 이미지를 추출해 사용 (카드 미리보기용)\n    var markdownImage = extractFirstImageFromMarkdown(postData.content);\n    if (markdownImage) {\n      // 본문 표시 방지를 위해 특별한 값 사용\n      if (postData.id && !previewData) {\n        return \'markdown-image\';\n      }\n      return markdownImage;\n    }\n\n    // 4. 기본 이미지 사용\n    return "/default-img.png";\n  };\n  return {\n    postData: postData,\n    authorData: authorData,\n    loading: loading,\n    error: error,\n    isLiked: isLiked,\n    likeCount: likeCount,\n    toggleLike: toggleLike,\n    likedUsers: likedUsers,\n    loadingLikes: loadingLikes,\n    fetchLikedUsers: fetchLikedUsers,\n    getDisplayImage: getDisplayImage\n  };\n};\n/* harmony default export */ const hooks_usePostData = (usePostData);\n// EXTERNAL MODULE: ./node_modules/firebase/storage/dist/esm/index.esm.js + 1 modules\nvar dist_esm_index_esm = __webpack_require__(2539);\n;// ./src/hooks/usePostActions.js\nfunction usePostActions_typeof(o) { "@babel/helpers - typeof"; return usePostActions_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, usePostActions_typeof(o); }\nfunction usePostActions_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ usePostActions_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == usePostActions_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(usePostActions_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = usePostActions_unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction usePostActions_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction usePostActions_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { usePostActions_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { usePostActions_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction usePostActions_slicedToArray(r, e) { return usePostActions_arrayWithHoles(r) || usePostActions_iterableToArrayLimit(r, e) || usePostActions_unsupportedIterableToArray(r, e) || usePostActions_nonIterableRest(); }\nfunction usePostActions_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction usePostActions_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return usePostActions_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? usePostActions_arrayLikeToArray(r, a) : void 0; } }\nfunction usePostActions_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction usePostActions_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction usePostActions_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n\n\n/**\n * 게시물 작업(수정/삭제 등)을 관리하는 커스텀 훅\n * @param {string} postId - 게시물 ID\n * @param {string} collectionName - 컬렉션 이름 (portfolios, labs, companies)\n * @param {Object} postData - 게시물 데이터 객체\n */\nvar usePostActions = function usePostActions(postId, collectionName, postData) {\n  var navigate = (0,chunk_SYFQ2XB5/* useNavigate */.Zp)();\n  var _useState = (0,react.useState)(false),\n    _useState2 = usePostActions_slicedToArray(_useState, 2),\n    deleting = _useState2[0],\n    setDeleting = _useState2[1];\n  var _useState3 = (0,react.useState)(null),\n    _useState4 = usePostActions_slicedToArray(_useState3, 2),\n    error = _useState4[0],\n    setError = _useState4[1];\n\n  // 게시물 수정 페이지로 이동\n  var handleEdit = function handleEdit() {\n    navigate("/".concat(collectionName, "/").concat(postId, "/edit"));\n  };\n\n  // 게시물 삭제 처리\n  var handleDelete = /*#__PURE__*/function () {\n    var _ref = usePostActions_asyncToGenerator(/*#__PURE__*/usePostActions_regeneratorRuntime().mark(function _callee() {\n      var batch, commentsRef, commentsQuery, commentsSnapshot, likesRef, likesQuery, likesSnapshot, _iterator, _step, file, fileRef, thumbnailRef, postRef;\n      return usePostActions_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!postId || deleting)) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt("return");\n          case 2:\n            _context.prev = 2;\n            setDeleting(true);\n            setError(null);\n            batch = (0,index_esm/* writeBatch */.wP)(firebase.db); // 1. 댓글 삭제\n            commentsRef = (0,index_esm/* collection */.rJ)(firebase.db, "".concat(collectionName, "_comments"));\n            commentsQuery = (0,index_esm/* query */.P)(commentsRef, (0,index_esm/* where */._M)("postId", "==", postId));\n            _context.next = 10;\n            return (0,index_esm/* getDocs */.GG)(commentsQuery);\n          case 10:\n            commentsSnapshot = _context.sent;\n            commentsSnapshot.docs.forEach(function (doc) {\n              batch["delete"](doc.ref);\n            });\n\n            // 2. 좋아요 삭제\n            likesRef = (0,index_esm/* collection */.rJ)(firebase.db, \'likes\');\n            likesQuery = (0,index_esm/* query */.P)(likesRef, (0,index_esm/* where */._M)("postId", "==", postId));\n            _context.next = 16;\n            return (0,index_esm/* getDocs */.GG)(likesQuery);\n          case 16:\n            likesSnapshot = _context.sent;\n            likesSnapshot.docs.forEach(function (doc) {\n              batch["delete"](doc.ref);\n            });\n\n            // 3. 파일 삭제 (스토리지)\n            if (!(postData !== null && postData !== void 0 && postData.files)) {\n              _context.next = 44;\n              break;\n            }\n            _iterator = _createForOfIteratorHelper(postData.files);\n            _context.prev = 20;\n            _iterator.s();\n          case 22:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 36;\n              break;\n            }\n            file = _step.value;\n            if (!file.url) {\n              _context.next = 34;\n              break;\n            }\n            _context.prev = 25;\n            fileRef = (0,dist_esm_index_esm/* ref */.KR)(firebase/* storage */.IG, file.url);\n            _context.next = 29;\n            return (0,dist_esm_index_esm/* deleteObject */.XR)(fileRef);\n          case 29:\n            _context.next = 34;\n            break;\n          case 31:\n            _context.prev = 31;\n            _context.t0 = _context["catch"](25);\n            console.error(\'Error deleting file:\', _context.t0);\n            // 파일 삭제 실패해도 계속 진행\n          case 34:\n            _context.next = 22;\n            break;\n          case 36:\n            _context.next = 41;\n            break;\n          case 38:\n            _context.prev = 38;\n            _context.t1 = _context["catch"](20);\n            _iterator.e(_context.t1);\n          case 41:\n            _context.prev = 41;\n            _iterator.f();\n            return _context.finish(41);\n          case 44:\n            if (!(postData !== null && postData !== void 0 && postData.thumbnail)) {\n              _context.next = 54;\n              break;\n            }\n            _context.prev = 45;\n            thumbnailRef = (0,dist_esm_index_esm/* ref */.KR)(firebase/* storage */.IG, postData.thumbnail);\n            _context.next = 49;\n            return (0,dist_esm_index_esm/* deleteObject */.XR)(thumbnailRef);\n          case 49:\n            _context.next = 54;\n            break;\n          case 51:\n            _context.prev = 51;\n            _context.t2 = _context["catch"](45);\n            console.error(\'Error deleting thumbnail:\', _context.t2);\n            // 썸네일 삭제 실패해도 계속 진행\n          case 54:\n            // 5. 게시글 문서 삭제\n            postRef = (0,index_esm/* doc */.H9)(firebase.db, collectionName, postId);\n            batch["delete"](postRef);\n\n            // 일괄 처리 실행\n            _context.next = 58;\n            return batch.commit();\n          case 58:\n            // 성공 시 목록 페이지로 이동\n            navigate("/".concat(collectionName));\n            return _context.abrupt("return", true);\n          case 62:\n            _context.prev = 62;\n            _context.t3 = _context["catch"](2);\n            console.error(\'Error deleting post:\', _context.t3);\n            setError(\'게시글 삭제 중 오류가 발생했습니다.\');\n            return _context.abrupt("return", false);\n          case 67:\n            _context.prev = 67;\n            setDeleting(false);\n            return _context.finish(67);\n          case 70:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 62, 67, 70], [20, 38, 41, 44], [25, 31], [45, 51]]);\n    }));\n    return function handleDelete() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return {\n    handleEdit: handleEdit,\n    handleDelete: handleDelete,\n    deleting: deleting,\n    error: error\n  };\n};\n/* harmony default export */ const hooks_usePostActions = (usePostActions);\n// EXTERNAL MODULE: ./src/components/common/AnimatedLoading.js\nvar AnimatedLoading = __webpack_require__(4738);\n// EXTERNAL MODULE: ./src/components/common/LoadingSpinner.js\nvar LoadingSpinner = __webpack_require__(3228);\n;// ./src/components/posts/view/BasePostView.js\nfunction BasePostView_typeof(o) { "@babel/helpers - typeof"; return BasePostView_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, BasePostView_typeof(o); }\nfunction BasePostView_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ BasePostView_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == BasePostView_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(BasePostView_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction BasePostView_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction BasePostView_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { BasePostView_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { BasePostView_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * 게시물 상세 보기 컴포넌트\n * 리팩토링된 버전으로 여러 작은 컴포넌트로 분리되었습니다.\n */\nvar BasePostView = function BasePostView(_ref) {\n  var collectionName = _ref.collectionName,\n    previewData = _ref.previewData,\n    previewAuthor = _ref.previewAuthor;\n  var _useParams = (0,chunk_SYFQ2XB5/* useParams */.g)(),\n    postId = _useParams.postId;\n  var navigate = (0,chunk_SYFQ2XB5/* useNavigate */.Zp)();\n  var _useAuth = (0,AuthContext/* useAuth */.As)(),\n    currentUser = _useAuth.currentUser;\n\n  // 게시물 데이터 로딩\n  var _usePostData = hooks_usePostData(postId, collectionName, previewData, previewAuthor),\n    postData = _usePostData.postData,\n    authorData = _usePostData.authorData,\n    loading = _usePostData.loading,\n    error = _usePostData.error,\n    isLiked = _usePostData.isLiked,\n    likeCount = _usePostData.likeCount,\n    toggleLike = _usePostData.toggleLike,\n    fetchLikedUsers = _usePostData.fetchLikedUsers,\n    getDisplayImage = _usePostData.getDisplayImage;\n  console.log(postData);\n\n  // 게시물 작업 관련 훅\n  var _usePostActions = hooks_usePostActions(postId, collectionName, postData),\n    handleEdit = _usePostActions.handleEdit,\n    handleDelete = _usePostActions.handleDelete,\n    deleting = _usePostActions.deleting;\n\n  // 작성자 프로필로 이동\n  var handleAuthorClick = function handleAuthorClick() {\n    if (!(authorData !== null && authorData !== void 0 && authorData.id)) return;\n    if ((currentUser === null || currentUser === void 0 ? void 0 : currentUser.uid) === authorData.id) {\n      navigate(\'/mypage\');\n    } else {\n      navigate("/profile/".concat(authorData.id));\n    }\n  };\n\n  // 좋아요 토글\n  var handleLike = /*#__PURE__*/function () {\n    var _ref2 = BasePostView_asyncToGenerator(/*#__PURE__*/BasePostView_regeneratorRuntime().mark(function _callee() {\n      return BasePostView_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (currentUser) {\n              _context.next = 3;\n              break;\n            }\n            alert(\'로그인이 필요합니다.\');\n            return _context.abrupt("return");\n          case 3:\n            _context.prev = 3;\n            _context.next = 6;\n            return toggleLike();\n          case 6:\n            _context.next = 11;\n            break;\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context["catch"](3);\n            alert(_context.t0.message);\n          case 11:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, null, [[3, 8]]);\n    }));\n    return function handleLike() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  // 로딩 중\n  if (loading) {\n    return /*#__PURE__*/react_default().createElement(AnimatedLoading/* default */.A, {\n      message: "\\uAC8C\\uC2DC\\uBB3C\\uC744 \\uBD88\\uB7EC\\uC624\\uB294 \\uC911\\uC785\\uB2C8\\uB2E4"\n    });\n  }\n\n  // 에러 발생 시\n  if (error) {\n    return /*#__PURE__*/react_default().createElement(Container/* default */.A, {\n      maxWidth: "lg",\n      sx: {\n        py: 4\n      }\n    }, /*#__PURE__*/react_default().createElement(Paper/* default */.A, {\n      sx: {\n        p: 4,\n        textAlign: \'center\'\n      }\n    }, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n      variant: "h6",\n      color: "error"\n    }, error)));\n  }\n\n  // 데이터 없음\n  if (!postData || !authorData) {\n    return /*#__PURE__*/react_default().createElement(Container/* default */.A, {\n      maxWidth: "lg",\n      sx: {\n        py: 4\n      }\n    }, /*#__PURE__*/react_default().createElement(Paper/* default */.A, {\n      sx: {\n        p: 4,\n        textAlign: \'center\'\n      }\n    }, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n      variant: "h6"\n    }, "\\uAC8C\\uC2DC\\uBB3C\\uC744 \\uCC3E\\uC744 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.")));\n  }\n  return /*#__PURE__*/react_default().createElement(Container/* default */.A, {\n    maxWidth: "lg",\n    sx: {\n      py: 4\n    }\n  }, /*#__PURE__*/react_default().createElement(Paper/* default */.A, {\n    elevation: 0,\n    sx: {\n      borderRadius: 2,\n      overflow: \'hidden\'\n    }\n  }, /*#__PURE__*/react_default().createElement(view_PostHeader, {\n    postId: postId,\n    postData: postData,\n    authorData: authorData,\n    isLiked: isLiked,\n    likeCount: likeCount,\n    isPreview: Boolean(previewData),\n    currentUser: currentUser,\n    collectionName: collectionName,\n    onDelete: handleDelete,\n    onLike: handleLike,\n    onAuthorClick: handleAuthorClick\n  }), /*#__PURE__*/react_default().createElement(view_PostContent, {\n    title: postData.title,\n    subtitle: postData.subtitle,\n    content: postData.content,\n    thumbnailUrl: postData.thumbnail === \'markdown-image\' ? null : postData.thumbnail,\n    getDisplayImage: getDisplayImage\n  }), /*#__PURE__*/react_default().createElement(view_PostLinks, {\n    links: postData.links,\n    sourceUrl: postData.sourceUrl\n  }), /*#__PURE__*/react_default().createElement(view_PostAttachments, {\n    files: postData.files\n  }), /*#__PURE__*/react_default().createElement(view_PostKeywords, {\n    keywords: postData.keywords\n  }), !previewData && /*#__PURE__*/react_default().createElement((react_default()).Fragment, null, /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      display: \'flex\',\n      alignItems: \'center\',\n      gap: 1,\n      px: 4,\n      pt: 4\n    }\n  }, /*#__PURE__*/react_default().createElement(Typography/* default */.A, {\n    variant: "h6",\n    color: "text.secondary",\n    gutterBottom: true\n  }, "\\uB313\\uAE00 ", postData.commentCount || 0)), /*#__PURE__*/react_default().createElement(Box/* default */.A, {\n    sx: {\n      px: 4,\n      py: 4,\n      borderTop: \'1px solid\',\n      borderColor: \'divider\'\n    }\n  }, /*#__PURE__*/react_default().createElement(comments_Comments, {\n    postId: postId,\n    collectionName: collectionName,\n    postAuthorId: postData === null || postData === void 0 ? void 0 : postData.authorId\n  })))));\n};\n/* harmony default export */ const view_BasePostView = (BasePostView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3483\n')},4333:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6540);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7594);\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7909);\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\nvar useLike = function useLike(postId, collectionName, userId) {\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLiked = _useState2[0],\n    setIsLiked = _useState2[1];\n  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    likeCount = _useState4[0],\n    setLikeCount = _useState4[1];\n  var _useState5 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    loading = _useState6[0],\n    setLoading = _useState6[1];\n\n  // 좋아요 토글\n  var toggleLike = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (userId) {\n              _context2.next = 2;\n              break;\n            }\n            throw new Error(\'로그인이 필요합니다.\');\n          case 2:\n            _context2.prev = 2;\n            _context2.next = 5;\n            return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .runTransaction */ .c4)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(transaction) {\n                var postRef, postDoc, q, likesSnapshot, currentLikeCount, newLikeRef, likeDoc;\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      postRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .doc */ .H9)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, collectionName, postId);\n                      _context.next = 3;\n                      return transaction.get(postRef);\n                    case 3:\n                      postDoc = _context.sent;\n                      if (postDoc.exists()) {\n                        _context.next = 6;\n                        break;\n                      }\n                      throw new Error(\'게시물을 찾을 수 없습니다.\');\n                    case 6:\n                      q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .query */ .P)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .collection */ .rJ)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, \'likes\'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .where */ ._M)(\'postId\', \'==\', postId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .where */ ._M)(\'userId\', \'==\', userId));\n                      _context.next = 9;\n                      return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .getDocs */ .GG)(q);\n                    case 9:\n                      likesSnapshot = _context.sent;\n                      currentLikeCount = postDoc.data().likeCount || 0;\n                      if (likesSnapshot.empty) {\n                        // 좋아요 추가\n                        newLikeRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .doc */ .H9)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .collection */ .rJ)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, \'likes\'));\n                        transaction.set(newLikeRef, {\n                          userId: userId,\n                          postId: postId,\n                          collectionName: collectionName,\n                          createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .serverTimestamp */ .O5)()\n                        });\n                        transaction.update(postRef, {\n                          likeCount: currentLikeCount + 1\n                        });\n                        setIsLiked(true);\n                        setLikeCount(currentLikeCount + 1);\n                      } else {\n                        // 좋아요 취소\n                        likeDoc = likesSnapshot.docs[0];\n                        transaction["delete"]((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .doc */ .H9)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, \'likes\', likeDoc.id));\n                        transaction.update(postRef, {\n                          likeCount: Math.max(0, currentLikeCount - 1)\n                        });\n                        setIsLiked(false);\n                        setLikeCount(Math.max(0, currentLikeCount - 1));\n                      }\n                    case 12:\n                    case "end":\n                      return _context.stop();\n                  }\n                }, _callee);\n              }));\n              return function (_x) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n          case 5:\n            _context2.next = 11;\n            break;\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2["catch"](2);\n            console.error(\'Error toggling like:\', _context2.t0);\n            throw new Error(\'좋아요 처리 중 오류가 발생했습니다.\');\n          case 11:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[2, 7]]);\n    }));\n    return function toggleLike() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  // 초기 좋아요 상태 및 카운트 설정\n  var initializeLikeStatus = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var postRef, postDoc, currentLikeCount, q, querySnapshot;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            if (postId) {\n              _context3.next = 2;\n              break;\n            }\n            return _context3.abrupt("return");\n          case 2:\n            _context3.prev = 2;\n            setLoading(true);\n\n            // 게시물의 좋아요 수 가져오기\n            postRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .doc */ .H9)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, collectionName, postId);\n            _context3.next = 7;\n            return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .getDoc */ .x7)(postRef);\n          case 7:\n            postDoc = _context3.sent;\n            if (!postDoc.exists()) {\n              _context3.next = 17;\n              break;\n            }\n            currentLikeCount = postDoc.data().likeCount || 0;\n            setLikeCount(currentLikeCount);\n\n            // 사용자의 좋아요 여부 확인\n            if (!userId) {\n              _context3.next = 17;\n              break;\n            }\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .query */ .P)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .collection */ .rJ)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, \'likes\'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .where */ ._M)(\'postId\', \'==\', postId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .where */ ._M)(\'userId\', \'==\', userId));\n            _context3.next = 15;\n            return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__/* .getDocs */ .GG)(q);\n          case 15:\n            querySnapshot = _context3.sent;\n            setIsLiked(!querySnapshot.empty);\n          case 17:\n            _context3.next = 22;\n            break;\n          case 19:\n            _context3.prev = 19;\n            _context3.t0 = _context3["catch"](2);\n            console.error(\'Error initializing like status:\', _context3.t0);\n          case 22:\n            _context3.prev = 22;\n            setLoading(false);\n            return _context3.finish(22);\n          case 25:\n          case "end":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[2, 19, 22, 25]]);\n    }));\n    return function initializeLikeStatus() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  // userId가 변경될 때마다 좋아요 상태 초기화\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    initializeLikeStatus();\n  }, [postId, collectionName, userId]);\n  return {\n    isLiked: isLiked,\n    likeCount: likeCount,\n    loading: loading,\n    toggleLike: toggleLike\n  };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useLike);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4333\n')}}]);